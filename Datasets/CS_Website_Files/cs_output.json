[
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_BooleanIfElseSwitch_index.html?C=S;O=A.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/BooleanIfElseSwitch Index of /Classes/Cs241/Examples/BooleanIfElseSwitch NameLast modifiedSizeDescription Parent Directory - DemoPrintf.java 2015-09-01 13:58 436 CompareDoubleValue.java2015-09-01 13:58 649 DanglingElse.java 2015-09-01 13:58 690 BooleanTests.java 2015-09-01 13:58 1.0K DemoSwitch.java 2015-09-01 13:58 1.1K NestedIfs.java 2015-09-01 13:58 1.1K PrintBoolean.java 2015-09-01 13:58 2.2K"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_LiangLabs_Lab07_lab7.html.json",
    "body_content": "CSCI 241 Labs: Lab 7 CSCI 241 Labs: Lab 7 Static Methods with Triangles Review these instructions before beginning the exercises. There are 4 checkpoints , plus the clean-up checkpoint, in this lab. You and your partner should work together using just one of your accounts. If you need help with any exercise, raise your hand. Getting Started Copy the directory /home/student/Classes/Cs241/Labs/Lab07 to your account. Change directories into Lab07 and start BlueJ by entering bluej&. Online Documentation Review As you have seen, Java programmers need to find details about the pre-built Java classes they use. We have used classes that are both standard (included with the Java language, such as String and Scanner) and non-standard (added for specific purposes, such as the ACM package of classes we have used for drawing circles in previous lab exercises). When you have an operating system such as Microsoft Windows installed on a machine, the main screen you see is called a 'desktop'. Using Gnome, you have the potential to work with four 'virtual' desktops (in other words, there are four desktops available, and you can see one at a time). Gnome calls these workspaces. An easy way to keep documentation handy is to have Firefox running in one workspace while you run BlueJ in a different workspace. In case you don't know how to do this: Examine the narrow panel in the lower-right corner of your screen. You'll see a 1/4, which indicates you are in workspace #1 (out of a total of 4). Click on each of the four workspaces in turn. Each choice represents a different virtual desktop, and when you click on one, your monitor screen shows the contents of that particular desktop. Return to the desktop in which you are running BlueJ. Click on one of the three other workspaces that are empty and start running Firefox. In Firefox, go to your course web page: www.cs.uwp.edu/Classes/Cs241. In the Course Related Documents and Websites section, we have included links to documentation for both the standard Java classes and also for the ACM library. Click on \"Java Platform Standard Edition & Java Development Kit Version 11 API Specification\". This document is the API Application Programming Interface) specification for the version of the Java language that we are using. Find the java.base module in the table and click it. The java.base module holds the most commonly used classes including all that we will need this semester. Find the java.lang package in the table and click it. A general summary of the java.lang package appears in the introductory paragraphs. Scroll down to the Class Summary section. You now see all the classes contained in the java.lang package. Examine the list; what looks familiar? We'll be asking you about which classes and methods you have used in the next checkpoint. Click the Integer class to see its details. Review its documentation. What have you used from it? Now, look at the details about the Math class. What do you notice about it? How many overloaded methods do you see? 1 Show us that you found this package and its classes, and answer these questions: Which classes in java.lang have you already used this semester? Which methods inside those classes? Remember how you learned to extract an int value from a String? You wrote a line that looked like: int x = Integer.parseInt(xString); To calculate a square root, you write a line that looks like: double y = Math.sqrt(number); How are the formats of right-hand sides of these two lines similar to each other? Which methods in the Math class are overloaded? How does Java tell them apart? There are three methods that \"round\" numbers in the Math class. They are: round(), ceil() and floor(). How do they differ? Triangle sides Move back to the desktop containing BlueJ and open the Lab07 project. In this project, open the Triangle class in the editor window. This partially-written class contains various calculations about a triangle, such as that seen in this diagram: When the program runs completely, the main() method will ask the user for three sets of (x,y) coordinates. It will then be able to calculate the length of each side. Once you have the lengths of the sides, all kinds of things can be calculated. The first set of changes you need to make fall within the main() method. For this checkpoint, complete the following: Comments in the code tell you which variables are missing in the declarations. Complete those declarations, thinking carefully about their data types. Initialize each variable to zero. Add code to calculate the height of the triangle. The height of this program's triangle will be the absolute value of the difference in y-coordinates between point 1 and point 2. Use the appropriate Math class method to help you with this calculation. Not much more can be done until you calculate the length of each side. The formula for the distance between two points (x1, y1) and (x2, y2) can be written as: Here are 2 sample triangles and their points as would match up in the diagram: Triangle A (x1,y1) = (0,2) (x2,y2) = (-1,0) (x3,y3) = (3,0) Triangle B (x1,y1) = (0,2) (x2,y2) = (0,0) (x3,y3) = (2,0) Because this code will be used 3 times, it makes sense to ask a method to do the calculation for us: Complete the method named calcSideLength(int, int, int, int), which is already in the code. It is written as a stub, which means that the signature is complete but the body of the code needs work. Use the formula above to calculate the value to be returned to the caller, which is the main() method. Which method in the Math class helps you this time? Right-click on the class in BlueJ's project window to execute the method with the points from triangles A and B, listed above. For triangle A, you should get: side1 = 2.24, side2 = 3.61, side3 = 4.00 For triangle B, you should get: side1 = 2.00, side2 = 2.83, side3 = 2.00 What would you expect to get for a side length if the x-values are the same, and the y-values are different? Once you have tested this method by itself, uncomment the lines in the main() method that fill in the distances for each side. Does it run correctly? Add lines to your main() method to print all your newly calculated values. Don't forget to include text next to each number so we know what it is. 2 Show us the code you have written and run it for us with triangles A and B. Lengths, Perimeter and Area More calculations! Now that we have determined the sides of the triangle, we can write other code for calculations that depend on that information. Specifically, we want you to: Calculate the perimeter of the triangle by adding all of the side lengths together. This code should be done inside the main() method. Set the base length of the triangle. It is defined as the same as the length of side 3. Write a new static method named calcArea(double, double) which takes the base length and height as parameters, and returns the area. The formula for the area of a triangle is: Test your calcArea() method in BlueJ's project window by right-clicking on the Triangle class. Use the points from triangles A and B above. For triangle A, you should get: area = 4.00 For triangle B, you should get: area = 2.00 Add a method call to your main() method that will place the value this method returns into your area variable. Add your perimeter, base length and area to the part of your program that prints your triangle's information. Again, be sure to include descriptive text next to each number. 3 Show us the code you have written and run it for us with triangles A and B. What happens if you ask Java to run the calcArea() method but you don't save the value it returns? Boolean Methods We can compare sides of triangle and use that information to classify the triangle into one of these categories: An equilateral triangle has all sides the same length. An isosceles triangle has 2 sides of the same length. A scalene triangle has sides of all different lengths. We don't expect you to write all these methods for this checkpoint, but you can do one of them. Write a method that will determine if the triangle is an isosceles triangle. Its signature looks like: isIsosceles(double, double, double) Each of the parameters is a side length. The method should return true if 2 of the sides are the same length, otherwise false. As you know, comparing two double values to each other using == or != is a bad idea. Your method should return true if 2 of the lengths are within 0.01 of each other. (Hint: find the differences, then test the value of the difference in your condition.) Triangle B is not only a right triangle, it is also isosceles. Triangle A is not. Try both sets of points when you test this method directly. Once again, add code to invoke this method from main(). Use an if -statement to print either \"is isosceles\" or \"is not isosceles\". 4 Show us the code you have written and run the program for us. Would we be able to tell if the triangle was equilateral by using this method, or would we need to write a separate method to check all 3 sides? Extra for Experts Write methods to determine if the triangle is equilateral or scalene. Hint: you can call any method from any other method; use already-written methods if that helps! After the Lab Return to Firefox, log onto Canvas and get your next programming assignment. Don't forget to log out from Canvas and close Firefox before you log out. 5 Show us that you have logged out, cleaned up, turned off your monitor and pushed in your chairs for this last checkpoint. End of Lab"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_LiangLabs_Lab01_lab1.html.json",
    "body_content": "CSCI 241 Labs: Lab 1 CSCI 241 Labs: Lab 1 Working in the Lab with BlueJ Objectives In this lab you will explore the Linux operating system and the BlueJ Programming Environment. Work with your partner and read the handout carefully as you go along. Make sure you EACH try every exercise. Getting your account Make sure that you have filled out, signed, and returned an account policy sheet. Our System Administrator will lead you through the steps to establish your account for this class. These steps are summarized in the prelab reading, as well. There are 6 checkpoints in this lab. If you need help with any problem, raise your hand. Getting Started Your instructor and System Administrator will help you set up your account and account preferences. We repeat some information here from prelab1 for review. Log in to the computer by entering your name and password. If your login is successful, there will be a short delay followed by the display of some startup Gnome windows (Gnome is your Desktop Manager Program.) Close any windows that show up by clicking on the X in the upper right-hand corner of the window. Look for the Applications menu in the top left corner of the screen. Click it to see Favorites, then click Terminal. panel at the top of the screen with several icons on it. Click on the terminal icon. You should get a terminal window titled with your login name, machine and current directory location. The cursor should appear to the right of the prompt \"[login-name@vegetable-name~]$\". Log out by clicking on your name in the top right corner of the screen and selecting the option, \"Log Out\". Another dialog box will then appear from which you can confirm that you want to log out. At this point you would normally walk away from the machine, but today we want you and your partner to practice logging on and off. Do so now. Getting Lab Materials Before we start, it would be a good idea to try to be somewhat organized! There is nothing worse that completing an assignment or lab and not being able to find it. So, your instructors suggest creating a directory hierarchy that organizes your files. Let's start by creating some directories. Open a terminal window. When you first open your terminal window, you are placed in your home directory. Create a new folder for CSCI 241. To do this, execute the following command: mkdir Cs241 Make the new directory your current directory. To do this, execute the following command: cd Cs241 Make the new directory your Cs241 directory. To do this, execute the following command: mkdir Labs Make the new directory your current directory. To do this, execute the following command: cd Labs Your instructors suggest using this directory hierarchy to stay organized. Now that you are in your Labs directory, you can copy the files you need for today's lab. Again, remember that you should use this procedure each time we have lab. Copy the files you need for today's lab. Following the \"$\" prompt, enter cp -r /home/student/Classes/Cs241/Labs/Lab01 . Don't forget to leave one space between Lab01 and the dot . at the end of the command. Refer to the prelab reading for more details about cp, the copy command. Continuing with UNIX Commands Get a long listing of your home directory by entering ls -l (remember that this command uses lowercase L's, not number 1's). Notice that there is now a subdirectory called Lab01. Get a long listing of what is contained in Lab01 (that's a zero-one at the end of Lab) by entering ls -l Lab01 Change the current directory to Lab01 by entering cd Lab01 Perform another ls once you get there. View the contents of a file, LabOne.java by entering more LabOne.java To advance to the next page of the file, press the space bar. 1: When you reach a checkpoint, call over the instructor or lab assistant to check you off. Always be prepared to answer questions about what you have done. For this checkpoint be prepared to: Tell us why it is important to log off when done working. Tell us what the -r, / and . mean in the copy command you entered. Sending a Program to a Second Account While you and your partner work in lab each week, programs you work on during lab time will be saved in only one of the two accounts. Follow the steps outlined in your PreLab1 handout in order to copy the lab assignment to your partner's account. 2: Be prepared to answer the following questions: Why can't lab partners copy directly from one account to another account? Show us that the copy has been obtained by your partner. Your partner may now log off, and partners should now go back to working together in one account. Running the Firefox Web Browser Start running the Firefox web browser from Applications-Favorites-Firefox Web Browser in the top desktop display panel. Go to the CSCI-241 course website http://www.cs.uwp.edu/Classes/Cs241 Log on to Canvas by clicking the link from the course web page. Type your RangerMail id and password. Choose the CSCI-241 course and read the information at the top of the Announcements area. This page may be updated at any time! An email message to your RangerMail address will tell you when to check it. 3: Tell us the answers to the questions you found at the top of Canvas's Announcements area. Working with BlueJ Make sure you are in your home directory by entering cd and pressing Enter at the terminal window command line. Running BlueJ Start running BlueJ by entering (after the $ prompt) the command bluej& Don't forget to type the ampersand (&). Open project Lab01 Choose Project -> Open Project In the file dialog window that appears, double click on the Lab01 icon. Open class LabOne in the editor by right clicking on the icon and choosing Open Editor. So ... you may not have ever seen Java before, but this class is simple enough that you should be able to figure out what it does. Examine the code in the file, but do not change it. What do you think this program does? Compile this class. Refer back to the prelab reading if you need a hint. Use your mouse to return to the black terminal window, and enter the UNIX command ls -l Lab01 See the two additional files in the Lab01 subdirectory? LabOne.class holds the compiled version of the class (translated into bytecode). LabOne.ctxt holds information used by BlueJ. To run your compiled program, return to the main BlueJ window and right-click on the class icon for LabOne. Choose the line that says 'Run Main Method'. While running, the program will prompt you to enter two integer values. Enter one value at a time by typing it at the end of the line, then pressing Enter. After the program collects the two integers it will display the result of dividing the first by the second. Follow the directions and press Enter after each value. Close the output and editing windows when you are done. Electronically Submitting and Printing a Programming Assignment After almost every lab, you will get a new programming assignment for you to complete on your own. Each assignment is due one or two weeks after the lab on which it is based. It must be submitted both through your lab account and into Canvas. You must electronically submit your program(s) while running BlueJ in the lab. Your submission copies all files contained in your BlueJ project to a directory where your instructors can access and grade them. It will be in a subdirectory with your login name. For practice, submit your BlueJ project named Lab01: Open a terminal (command) window and navigate (cd) inside the Lab01 folder. Perform an ls to make sure your LabOne.java file is here. If not, navigate to the project folder and check again. Once you are in the correct Lab01 directory, type submit LabOne.java and hit enter. A success message will be printed. Open a browser window and submit the LabOne.java file to Canvas for Grading. Close the window(s) when you are finished. To verify that the submission worked, you can display the contents of what you copied to the screen by using this command (if your login name is smith): more /home/student/Submit/Cs241/smith/Lab01/LabOne.java To practice printing, return to your editor window for the LabOne class. Choose Class-Print, then click OK to print a copy of LabOne.java. The printed copy will come out on the laser printer in MOLN D120, just outside the west doorway of the lab (MOLN D116), by our system administrator's office. The CS lab system will send you an email message each time telling you how many pages remain in your account. 4 Be prepared to answer the following questions: What does a BlueJ project hold? What are the basic differences between source code and byte code? Show your lab instructor or assistant that you have compiled this program and can run it. Show us your printout. Tell us how you will find out how many pages your account has in it before you need to buy more paper. Now is a good time to trade keyboard and/or mouse control with your partner. Creating your own Class Now comes the real fun. You will create a complete Java class that implements an Etch-a-Sketch like program. Add a new class named Doodle to the project. Edit the class so that it appears almost exactly like that below (but with your own names, etc). /** * Name: ____________ (login) * Course: CSCI 241 - Computer Science I * Section: ____ * Assignment: 0 */ import acm.program.*; import acm.graphics.*; import java.awt.*; import java.awt.event.*; public class Doodle extends GraphicsProgram { // instance variables private Point last; // The previous position of the mouse private Color color; // The color used for the drawing /** * Constructor for objects of class Doodle */ public Doodle() { start(); addMouseListeners(); color = Color.BLACK; } /** * Called when the mouse is first pressed. */ public void mousePressed(MouseEvent e) { last = e.getPoint(); } /** * Called when the mouse is dragged. * It creates a short line segment from the previous position to * this position. */ public void mouseDragged(MouseEvent e) { Point pt = e.getPoint(); GLine gline = new GLine(pt.x, pt.y, last.x, last.y); gline.setColor(color); add(gline); last = e.getPoint(); } /** * Change the color for the next line drawn. */ public void setColorBlue() { color = Color.BLUE; } } Save this class by selecting \"Class\" and \"Save\". Note that there is a keystroke that you can use to do this instead (Ctrl-S). Your class is saved every time you use Ctrl-S. Compile the class, removing any errors that are detected. Create an instance of the class. To do this, right-click on the Doodle class and choose new Doodle(). Click OK on the next window that appears. WAIT for the newly created Doodle object will be displayed as a red icon on BlueJ's object bench. Draw a multi-colored picture. To draw, hold the left mouse button down while you move the mouse. It is up to you to figure out how to change colors. 5: Show your lab instructor or assistant that you have entered and compiled this program and can run it. End of lab Return to Firefox and log onto Canvas. Type your RangerMail id and password. Choose the CSCI-241 course and open the Assignments/Programming Assignments area to find your instructions for the first programming assignment. For this assignment, you'll use BlueJ to type in, edit, compile and run an already-written Java class. If you haven't already received one, ask your instructor for a paper copy of the program you will type in. This program will be due at the beginning of lecture, one week from today. You will need to submit it both electronically and on paper. Each time you leave the lab, be sure to do the following: Log out of Firefox (if logged in). Log out of your account. Turn your monitor off. Push in your chair. Clean up any food, drink or other materials left on the wooden table near the printer. 6: Show us that you have logged out, cleaned up and pushed in your chairs for this last checkpoint."
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_StringsStringBuilders_index.html?C=S;O=A.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/StringsStringBuilders Index of /Classes/Cs241/Examples/StringsStringBuilders NameLast modifiedSizeDescription Parent Directory - TryConcatenation.java 2015-09-01 13:57 394 StringLoops.java 2015-09-01 13:57 452 ReverseAStringBuilde..>2015-09-01 13:57 635 GuessOutput.java 2015-09-01 13:57 708 TestCharData.java 2015-09-01 13:57 1.0K StringBuilderLoopDel..>2015-09-01 13:57 1.2K SBExamples.java 2015-09-01 13:57 1.2K TryStringMethods.java 2015-09-01 13:57 1.2K"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_InstantiableClasses_index.html?C=M;O=D.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/InstantiableClasses Index of /Classes/Cs241/Examples/InstantiableClasses NameLast modifiedSizeDescription Parent Directory - TestFraction.java 2015-09-01 13:57 936 TestCircle.java 2015-09-01 13:57 494 FractionArrayTest.java 2015-09-01 13:57 1.6K Fraction.java 2015-09-01 13:57 3.1K Circle.java 2015-09-01 13:57 1.6K"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_BasicArrays.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/BasicArrays Index of /Classes/Cs241/Examples/BasicArrays NameLast modifiedSizeDescription Parent Directory - CopyArrayExample.java 2015-09-01 13:57 942 InstantiateFillPrint..>2015-09-01 13:57 869 ParameterPrint.java 2015-09-01 13:57 963 Stats.java 2015-09-01 13:57 1.8K TryArrayParam.java 2015-09-01 13:57 2.9K"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_Loops.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/Loops Index of /Classes/Cs241/Examples/Loops NameLast modifiedSizeDescription Parent Directory - BasicWhile.java 2015-09-01 13:57 1.1K ForLoopMystery.java 2015-09-01 13:57 464 MultTable.java 2015-09-01 13:57 1.3K NestedFor.java 2015-09-01 13:57 2.1K RectangleOfStars.java 2015-09-01 13:57 928 Stats.java 2015-09-01 13:57 1.6K Tables.java 2015-09-01 13:57 1.6K Triangles.java 2015-09-01 13:57 696 WhileDoWhile.java 2015-09-01 13:57 2.2K WhileFor.java 2015-09-01 13:57 1.2K"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_index.html.json",
    "body_content": "UW-Parkside CSCI 241 Course Outline CSCI 241: Computer Science I Section 001 Instructor: Anthony M Aiello, MS CIS, Ba. Sc. Computer Science Office: Molinaro Hall L253 E-mail: AielloA at uwp dot edu Office Hours : TBA, Via Teams online, and by appointment. See Canvas for syllabus, programming assignments and current messages: Canvas login page Instructions and Sample Code: Reference Materials: Lab Exercises Java Platform, Standard Edition & Java Development Kit Version 11 API Specification Textbook Author's Website ACM Library Documentation Java Program Examples JDK Release Notes Software Downloads BlueJ Tutorial Installing & Using VPN and FileZilla CS Lab Remote Desktop Connection Web source for this document: http://www.cs.uwp.edu/Classes/Cs241/index.html"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_Loops_index.html?C=D;O=A.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/Loops Index of /Classes/Cs241/Examples/Loops NameLast modifiedSizeDescription Parent Directory - BasicWhile.java 2015-09-01 13:57 1.1K ForLoopMystery.java 2015-09-01 13:57 464 MultTable.java 2015-09-01 13:57 1.3K NestedFor.java 2015-09-01 13:57 2.1K RectangleOfStars.java 2015-09-01 13:57 928 Stats.java 2015-09-01 13:57 1.6K Tables.java 2015-09-01 13:57 1.6K Triangles.java 2015-09-01 13:57 696 WhileDoWhile.java 2015-09-01 13:57 2.2K WhileFor.java 2015-09-01 13:57 1.2K"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_LiangLabs_Lab04_prelab4.html.json",
    "body_content": "CSCI 241 Labs: PreLab 4 CSCI 241 Labs: PreLab 4 Think Before You Leap Introduction Way too often in CSCI 241 students think that working on a project or lab means typing things at the computer. In truth, professional programmers only spend about 25% of their time coding. Most of the rest of the time is spent designing and testing their systems. The types of design decisions programmers make fall into two basic categories: Deciding what classes and methods should go into the system. Most professional software is developed by software engineers who work in teams. Team leaders assign responsibility for implementing various classes to individual programmers on the team. The programmer must be aware of exactly what their class must do, before they can begin implementing it. Obviously, these top-level design decisions must be made early and are critical to the success of the system. Fortunately for you, in CSCI 241 your instructors will usually give you descriptions of the classes and/or methods you need to write. If they don't, the project should still be small enough that the choices will be obvious. In chapter 6, we will learn how to write code with separate methods. In chapter 9, we will learn how to write our own separate classes. Deciding on the logic inside of each method. In chapters 1-2 of the text there was very simple logic in each main()method. The CPU started running at the first line and executed the code in a line by line fashion until it reached the end of the method. Chapter 3 discusses how a computer program makes decisions. This can greatly complicate your code. Thinking clearly about (and writing down) what the code should look like before you jump in and start typing is critical. Pseudocode A standard technique for documenting the design of a method is pseudocode. (Pseudocode is defined in your text in Chapter 2 on page 34.) The purpose of pseudocode is to document your thoughts about the logic needed for a task before you ever sit down at the computer. It documents the algorithm without worrying about the syntax of a particular language. Here is the Merriam-Webster Dictionary definition of an algorithm: a procedure for solving a mathematical problem (as of finding the greatest common divisor) in a finite number of steps that frequently involves repetition of an operation; broadly : a step-by-step procedure for solving a problem or accomplishing some end especially by a computer. Aside: In real world software development, the design of the system is considered an important piece of documentation even after the system is completed. When a programmer has to make a change to a method, say to fix a Y2K bug or make the system work under another operating system, she usually starts by reading through the design documentation for the method. There are just a few rules for writing pseudocode: Write down all the important steps of the algorithm without paying attention to the rules of the language. Don't worry about where the semicolons go or whether you need squiggly braces. Don't worry about the name of a particular method you want to call, instead refer to it by what it does. For example, System.out.println(x); can simply be referred to in the pseudocode as print x Include things that are needed for the algorithm to make sense to a human reader, such as you or your instructor. This includes consistent indentation to show when you are inside a class, method or block of code. (It also includes showing how parameters and variables are used; these will be defined in chapter 5). Include anything that adds to the clarity of the logic. Exclude anything that seems like a \"yucky\" language detail (such as semi-colons). Examples Consider the problem that instructors face every semester: assigning letter grades to students based on their performance on a series of exams. In our case, let's assume there are three exams which all count equally. A program to process the data would require at least two sections: one to calculate the average and one to assign a grade based on that average. Here is pseudocode for each: calculateAverage section average = (exam1 + exam2 + exam3) / 3 print average end calculateAverage section Note when looking at the above pseudocode that many of the details are missing. It does not include variable declarations, because the data types are language-specific. It does not indicate how the numbers for each exam score are collected by the program. They could come from standard input, a GUI input dialog box or read from a file. It is left for the reader to figure out that the average should be a double. The division is by three, where you should know that here we would want 3.0 when writing the method in Java. When the calculated average is printed, it will probably include text explaining the meaning of the number. Do you see how to translate the above pseudocode into Java code? Here is the other section's pseudocode: assignGrade section if average >= 90 grade = 'A' else if average >= 80 grade = 'B' else if average >= 70 grade = 'C' else if average >= 60 grade = 'D' else grade = 'F' print grade end assignGrade section Pay particular attention to the indentation in this example. Note that the print statement is at the same level of indentation as the if..else. This means the print is not inside the if block. What will be returned if the score entered is 50? 87? 90? Do you see how to translate the above pseudocode into Java code? A Range of Correct Solutions It is important to realize that in many problems the algorithm is not unique. In the above example, we could written this alternatively: assignGrade section if average < 60 print 'F' else if average < 70 print 'D' else if average < 80 print 'C' else if average < 90 print 'B' else print 'A' end assignGrade section We have: Changed the order in which the grade ranges are checked. Removed local variable grade. Inserted additional print statements. The algorithm is still completely correct. When we are checking for equality against a range of values, we can also frequently choose between using an if or a switch statement. There are many correct algorithms for some problems. The differences between them are often trivial and irrelevant. Sometimes the biggest difference between them is in how fast they run. We will look at the efficiency of algorithms later this semester and give it a more complete treatment in CSCI 242 and CSCI 340. In this week's lab you will be asked to create pseudocode for algorithms to solve particular problems and then implement the algorithms in Java."
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_NumbersOperatorsCharacters_index.html?C=S;O=D.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/NumbersOperatorsCharacters Index of /Classes/Cs241/Examples/NumbersOperatorsCharacters NameLast modifiedSizeDescription Parent Directory - Primitives.java 2015-09-01 13:57 1.2K PrePostIncr.java 2015-09-01 13:57 1.2K CharASCII.java 2015-09-01 13:57 949 TestEscape.java 2015-09-01 13:57 862 TestInputDialog.java 2015-09-01 13:57 688 Numerics.java 2015-09-01 13:57 686 Typecasting.java 2015-09-01 13:57 603 TryUnicode.java 2015-09-01 13:57 422"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_LiangLabs_Lab12_prelab12.html.json",
    "body_content": "CSCI 241 Labs: PreLab 12 CSCI 241 Labs: PreLab 12 Bioinformatics Introduction Bioinformatics can be viewed as the application of computer technology to biological problems. In recent years there has been an explosion of data about biological systems. For example, the study of DNA, how it encodes genes, how those genes are translated to proteins and how those protein molecules are twisted and folded into three dimensional shapes provides complex problems that can only be addressed using computers. There is significant advantage to understanding these processes, too. We may find cures for genetic diseases or design new drugs on the computer, rather than experimentally. Genetic engineering holds promise for developing new strains of agricultural plants to help feed an exploding world population. Fortunately for you, you are not expected to solve the world's problems in CS1. We do want to give you enough background, however, to understand the basics of the field. DNA Deoxyribonucleic acid (DNA) encodes the genes present in animals, microbes and plants. Each DNA molecule is made up of sequences of four simpler molecules, called nucleotides. Each nucleotide contains a representative base, either adenine (A), cytosine (C), guanine (G), and thymine (T). We can represent a strand of DNA as a sequence of the bases. Here is an example sequence: ACGGGAGGACGGGAAAATTACTACGGATTAGC A real DNA molecule can contain hundreds of thousands to millions of nucleotides. A gene is a small portion of a DNA molecule that contains information about how to make one protein. Variations in genes are what make us different from each other. One version of a gene may give a person blond hair, while another version will give a person black hair. A single DNA molecule usually contains many genes. About 50 years ago, it was discovered that it takes two strands of DNA to make a molecule. They are joined together in a spiral staircase shape called a double helix. The account of this discovery is recorded in the book, The Double Helix: A Personal Account of the Discovery of the Structure of DNA by James D. Watson and Lawrence Bragg. This book is a very good read and is highly recommended by your instructors. (It is available in the UW-Parkside library.) The two strands are known as reverse complements. They must match up nucleotide by nucleotide according the rules that an A always matches with a T, and a G always matches with a C. For example, the DNA sequence given above would require the match: 5' TGCCCTCCTGCCCTTTTAATGATGCCTAATCG 3' 3' ACGGGAGGACGGGAAAATTACTACGGATTAGC 5' The strands have an identifiable left end, called the five prime, 5', end and a right end, called the three prime, 3', end. DNA sequences are always written from the 5' end to the 3' end. When DNA is used to generate proteins the cell processes it from the 5' end to the 3' end. The ends of the each strand match with the opposite end of the other strand, however. This is shown in the sequences above. If we were to write the bottom sequence by itself, it should be written in the opposite order, e.g. 5' CGATTAGGCATCATTAAAAGGGCAGGAGGGCA 3' Each gene appears in only one of the strands of the DNA. When scientists search DNA for genes, it is important that they search both strands, but it is a fairly simple algorithm (i.e., doable in CS 1) to translate one strand of DNA into its reverse complement. RNA Most of the time, genetic information is stored as DNA. To create proteins from the DNA, an intermediate molecule is formed, known as ribonucleic acid (RNA). Very Brief Aside: Sometimes genetic information is encoded and stored directly in RNA. HIV (human immunodeficiency virus) is one example of this. To transcribe DNA to RNA simply replace all the Ts in the DNA with Us. Proteins Proteins are made up of amino acids. There are 20 different amino acids used to build proteins. Another Very Brief Aside: This was recently expanded to 22. Yet Another Very Brief Aside: The human body can produce most of these amino acids. A few of them, however, we cannot produce on our own and have to ingest (take into our bodies by eating certain foods or taking vitamin supplements). These are called the essential amino acids. Everyone, but particularly vegetarians, must make certain that they take in enough essential amino acids or they risk serious health problems. Translating RNA to protein takes some work. A single strand of RNA may encode one or more proteins. There are only 4 nucleotides in the RNA and they need to form the right combinations to represent 20 different amino acids. If we group the nucleotides 2 at a time, we would only get 16 different possible pairs. Therefore we must take the nucleotides 3 at a time to get enough, but this gives us 64 different combinations, well more than we need. A sequence of 3 nucleotides is called a codon. Scientists have thoroughly worked out which amino acid each codon represents. The following table (boldly stolen from the Internet) lists the amino acids, their single letter codes (SLC) and the codons that represent them: One Letter And Three Letter Amino Acid Symbols And Codons AAlaAlanineGCA GCC GCG GCU CCysCysteineUGC UGU DAspAspartic AcidGAC GAU EGluGlutamic AcidGAA GAG FPhePhenylalanineUUC UUU GGlyGlycineGGA GGC GGG GGU HHisHistidineCAC CAU IIleIsoleucineAUA AUC AUU KLysLysineAAA AAG LLeuLeucineUUA UUG CUA CUC CUG CUU MMetMethionineAUG NAsnAsparagineAAC AAU PProProlineCCA CCC CCG CCU QGlnGlutamineCAA CAG RArgArginineAGA AGG CGA CGC CGG CGU SSerSerineAGC AGU UCA UCC UCG UCU TThrThreonineACA ACC ACG ACU VValValineGUA GUC GUG GUU WTrpTryptophanUGG YTyrTyrosineUAC UAU Note: If more than one codon is listed for an amino acid, it means any of those codons will translate into that amino acid. One tricky part of translating RNA to amino acids is knowing where the protein's representation starts. A protein might start at the zeroth, first or second location of an RNA fragment. The gene might also be in the complementary strand of DNA. Thus, given an DNA sequence, there are two possible RNA sequences and 6 possible protein sequences. Scratching the Surface So far we have just scratched the surface of bioinformatics. There are many other problems in bioinformatics where computers are helpful. For example, DNA molecules are huge. Finding genes on them is computationally expensive. Mutations occur in DNA that lead to changes in proteins, which manifest themselves in disease. The sequence of amino acids in a protein is determined by the DNA. The sequence twists itself and bends into complex three dimensional shapes. Current theory suggests that the shape is determined by minimizing the energy required to maintain the bonds. Studying the energy minimization involved is a complex numerical calculation. Proteins don't work in isolation. Instead, biological processes often require many proteins working in harmony to accomplish a task. Biologists are just starting to get an experimental handle on how to determine which genes get turned on simultaneously to produce the multiple proteins needed and how proteins interact with each other. If you think this stuff is cool, consider using the CS breadth requirement to take some Bioinformatics courses in UW-Parkside's Department of Biological Sciences."
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_BasicArrays_index.html?C=D;O=A.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/BasicArrays Index of /Classes/Cs241/Examples/BasicArrays NameLast modifiedSizeDescription Parent Directory - CopyArrayExample.java 2015-09-01 13:57 942 InstantiateFillPrint..>2015-09-01 13:57 869 ParameterPrint.java 2015-09-01 13:57 963 Stats.java 2015-09-01 13:57 1.8K TryArrayParam.java 2015-09-01 13:57 2.9K"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_Methods_index.html?C=D;O=D.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/Methods Index of /Classes/Cs241/Examples/Methods NameLast modifiedSizeDescription Parent Directory - TestMax.java 2015-09-01 13:57 561 Temperature.java 2015-09-01 13:57 790 MultiplicationTable...>2015-09-01 13:57 1.8K"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_2DArrays_index.html?C=N;O=D.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/2DArrays Index of /Classes/Cs241/Examples/2DArrays NameLast modifiedSizeDescription Parent Directory - MultiplicationTable...>2015-09-01 13:57 1.6K"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_BooleanIfElseSwitch_index.html?C=D;O=D.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/BooleanIfElseSwitch Index of /Classes/Cs241/Examples/BooleanIfElseSwitch NameLast modifiedSizeDescription Parent Directory - PrintBoolean.java 2015-09-01 13:58 2.2K NestedIfs.java 2015-09-01 13:58 1.1K DemoSwitch.java 2015-09-01 13:58 1.1K DemoPrintf.java 2015-09-01 13:58 436 DanglingElse.java 2015-09-01 13:58 690 CompareDoubleValue.java2015-09-01 13:58 649 BooleanTests.java 2015-09-01 13:58 1.0K"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_StringsStringBuilders_index.html?C=D;O=D.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/StringsStringBuilders Index of /Classes/Cs241/Examples/StringsStringBuilders NameLast modifiedSizeDescription Parent Directory - TryStringMethods.java 2015-09-01 13:57 1.2K TryConcatenation.java 2015-09-01 13:57 394 TestCharData.java 2015-09-01 13:57 1.0K StringLoops.java 2015-09-01 13:57 452 StringBuilderLoopDel..>2015-09-01 13:57 1.2K SBExamples.java 2015-09-01 13:57 1.2K ReverseAStringBuilde..>2015-09-01 13:57 635 GuessOutput.java 2015-09-01 13:57 708"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/index.html.json",
    "body_content": "University of Wisconsin Parkside Computer Science Computer Science University of Wisconsin Parkside University of Wisconsin Parkside Home 262-595-2314 CS Account Policy Lab Schedule Connecting to Lab - UW-Parkside Pages Home Computer Science Major Computer Science Department Department Webpages Computer Science I App Factory UWP CS Policy Department of Computer Science University of Wisconsin-Parkside Computer Account Policy This policy is established by the Department of Computer Science to provide the department\u2019s students, staff and faculty the computational and network resources needed to meet their recognized educational, research and administrative commitments. Due to the limited nature of available computing and network resources, all users are expected to use good judgment in sharing these resources and to avoid wasteful and abusive activities. Computer and/or network usage not necessary to meet recognized educational, research and administrative commitments to the Department of Computer Science or to UW-Parkside will be considered wasteful, including unnecessary storage of disk files, careless execution of resource-consuming processes, or the generation of excessive network traffic or printed output. In addition to adhering to the general guidelines above, the following specific limitations are placed on Department of Computer Science computer account holders: Nobody else may use accounts assigned to you, even if he or she has your permission. You are to use only accounts assigned to you. Your account is provided for legitimate activities directly relating to the mission of UW-Parkside. Any other use may result in loss of privileges. Under certain circumstances, it may be necessary for a staff member to examine your files (protected or otherwise). You are responsible for the content and size of all files in accounts assigned to you. Disk files not related to legitimate activities directly relating to the mission of UW-Parkside and/or which consume large amounts of space may be removed without warning. Processes which consume excessive system resources, or which are objectionably degrading system response or network access may be terminated without warning by system staff. You may not harass or threaten other users on this system or any computer with which this system communicates. You may not attempt to acquire, access or modify passwords, files, accounts or other information that does not belong to you. You may not attempt to crash, violate the integrity of, or adversely affect the activities of the computer system or the network. Distasteful or offensive displays and printouts are not permitted. Physical abuse, mishandling and modification of workstations, printer and other hardware is not permitted. Computer operating system and related software are operated at UW-Parkside under software license agreements. Under these agreements, the software may be used for instructional, research and administrative purposes only. It is a violation of these agreements, and of Wisconsin statutes, to copy or transmit this software in printed or machine-readable form, or to use the software or computer system for personal gain, or to place a third party in a position of commercial advantage. Occurrences of misconduct in any of these areas may result in loss of computer and/or network access; flagrant violation may result in legal action. NO Food or Drinks are allowed in the lab! The designated location for eating/drinking is the Brickstone Grill & Eatery. I have read and understood the above policy. I understand that failure to abide by the letter and spirit of this policy will result in the loss of my privileges. I further realize that this policy applies to all accounts that I may have on this campus. \u00a9 University of Wisconsin Parkside \u2022 900 Wood Road \u2022 PO Box 2000 Kenosha, WI 53141-2000"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_LiangLabs_Lab03_prelab3.html.json",
    "body_content": "CSCI 241 Labs: PreLab 3 CSCI 241 Labs: PreLab 3 Practice, Practice, Practice Introduction Have you ever tried learning to play a musical instrument? Perhaps you were inspired to play guitar because of a favorite musician's work. It is a sobering experience to pick up that instrument for the first time and find that placing your fingers for even a basic chord is awkward and difficult. One encounters similar challenges when learning a computer programming language. The task becomes even more difficult when the language is as complex as Java. Writing your first program from scratch can seem overwhelming. When learning a new programming language, we must begin with the \"building blocks\", i.e., the basic statements which are used in nearly every program. Chapter 2 contains these types of statements. The first part of a programmer's job is to break the assignment into parts. Many computer programs use the same basic general structure, sometimes called \"IPO\" (Input-Process-Output): Obtain input from the user. Process that input. Generate output that is sent back to the user. Seems simple, right? This \"to-do\" list creates all kinds of questions, however: Should the program use text or GUI input? What kind of data will be coming in from the keyboard? If numeric, is it integer or real? How many data items will be entered from the keyboard? In what sequence will they appear? How many values will the program need to calculate? What kind of calculations are needed? Will I need to find special formulas somewhere? What form should the output take? Is it a printed paragraph, table, GUI message box? Once the program is written, how do I know it will always run correctly? (This involves choosing several sets of \"test data\"; i.e., data we choose for hand-calculations, to see if the program produces the same results.) For example, picture your last grade report that you received at the end of the semester (college or high school). A non-programmer decided on what kind of information it should contain, and also its appearance (layout). A programmer typically receives a \"mock-up\" (sample) of the desired resulting report and needs to work backward, figuring out where the data comes from, and what kind of work the program needs to do to create the resulting grade report. If there are questions that the mock-up doesn't answer, the programmer goes back to the person requesting the work for clarification. Write, Test, Write Some More Some students, especially if they feel they already \"know\" the language, may be tempted to write the entire program before compiling it. This only works if the programmer has a lot of luck! In the \"old days\" (when your instructor was in college), computer processing time was expensive and the goal was to compile as few times as possible. We don't have that restriction today. Perhaps you have already written a program in which you copied and pasted a line of code many times, only to later discover that you made a typo in the original. Better to make sure the original works first and copy the code only when you know it works correctly.You can write just a little code at a time, trying it out, and adding more after you know what you have so far has worked. For example, look at the ComputeArea program in your textbook. You see it in several versions within section 2.2. Each of those versions will compile without errors. The comments describing the steps give the programmer an outline to follow, filling in the details a piece at a time. Choosing Test Data Choosing good test data is an art in itself. Some companies have entire teams of programmers and analysts whose jobs are to create and test a wide range of test values for the programs that others have written. It is good software engineering practice to detect errors as early in the process as possible because errors propagate quickly. Remember the program you worked on in last week's lab that calculated the hypotenuse of a right triangle? A 3-4-5 right triangle is an easy example to try. Certainly, you should can use numbers that are easy to calculate as test data. But also, think about what kinds of values are \"at the edge\" of what seems reasonable for your program to handle. Here are some ideas of what you might want to test for numeric data in that particular example: Integer values that one can calculate easily, such as 3(side a) and 4 (side b), giving 5 for a hypotenuse Real values - what about 3.25 and 4.999 for sides? Zero - will the program still calculate \"correctly\" if one of the values is zero? We would need if statements to avoid zero as an input value, so we won't worry about values that couldn't make up a right triangle. We just want to make sure the program doesn't crash during its run. What about negative values? Integers or real numbers? In this week's lab, you'll practice writing simple programs and designing test data for them."
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_2DArrays_index.html?C=M;O=D.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/2DArrays Index of /Classes/Cs241/Examples/2DArrays NameLast modifiedSizeDescription Parent Directory - MultiplicationTable...>2015-09-01 13:57 1.6K"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_Loops_index.html?C=S;O=D.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/Loops Index of /Classes/Cs241/Examples/Loops NameLast modifiedSizeDescription Parent Directory - WhileDoWhile.java 2015-09-01 13:57 2.2K NestedFor.java 2015-09-01 13:57 2.1K Stats.java 2015-09-01 13:57 1.6K Tables.java 2015-09-01 13:57 1.6K MultTable.java 2015-09-01 13:57 1.3K WhileFor.java 2015-09-01 13:57 1.2K BasicWhile.java 2015-09-01 13:57 1.1K RectangleOfStars.java 2015-09-01 13:57 928 Triangles.java 2015-09-01 13:57 696 ForLoopMystery.java 2015-09-01 13:57 464"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_Methods_index.html?C=S;O=A.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/Methods Index of /Classes/Cs241/Examples/Methods NameLast modifiedSizeDescription Parent Directory - TestMax.java 2015-09-01 13:57 561 Temperature.java 2015-09-01 13:57 790 MultiplicationTable...>2015-09-01 13:57 1.8K"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_BasicArrays_index.html?C=S;O=D.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/BasicArrays Index of /Classes/Cs241/Examples/BasicArrays NameLast modifiedSizeDescription Parent Directory - TryArrayParam.java 2015-09-01 13:57 2.9K Stats.java 2015-09-01 13:57 1.8K ParameterPrint.java 2015-09-01 13:57 963 CopyArrayExample.java 2015-09-01 13:57 942 InstantiateFillPrint..>2015-09-01 13:57 869"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_NumbersOperatorsCharacters_index.html?C=D;O=A.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/NumbersOperatorsCharacters Index of /Classes/Cs241/Examples/NumbersOperatorsCharacters NameLast modifiedSizeDescription Parent Directory - CharASCII.java 2015-09-01 13:57 949 Numerics.java 2015-09-01 13:57 686 PrePostIncr.java 2015-09-01 13:57 1.2K Primitives.java 2015-09-01 13:57 1.2K TestEscape.java 2015-09-01 13:57 862 TestInputDialog.java 2015-09-01 13:57 688 TryUnicode.java 2015-09-01 13:57 422 Typecasting.java 2015-09-01 13:57 603"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_InstantiableClasses_index.html?C=N;O=D.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/InstantiableClasses Index of /Classes/Cs241/Examples/InstantiableClasses NameLast modifiedSizeDescription Parent Directory - TestFraction.java 2015-09-01 13:57 936 TestCircle.java 2015-09-01 13:57 494 FractionArrayTest.java 2015-09-01 13:57 1.6K Fraction.java 2015-09-01 13:57 3.1K Circle.java 2015-09-01 13:57 1.6K"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_LiangLabs_Lab14_prelab14.html.json",
    "body_content": "CSCI 241 Labs: PreLab 14 CSCI 241 Labs: Prelab 14 Data Encryption Much of this document is borrowed from \"Pascal Programming and Problem Solving, 4th ed.\" by Sanford Leestma and Larry Nyhoff, Macmillan Publishing Co, 1993. Encryption refers to the coding of information in order to keep it secret. The string of characters comprising the information is called plaintext. It is transformed into another string by an algorithm that produces a coded form of the information called a cryptogram or ciphertext. The coded version may be safely stored or transmitted. At a later time it can be deciphered by reversing the encrypting process to recover the original information. Data encryption has numerous uses in the real world. Governments can safely communicate with their embassies around the world. The military can safely communicate with widely dispersed units. Banks can (and do) safely transfer billions of dollars to other institutions daily. A CS professor here at UW-Parkside has his mother's Little Orphan Annie secret decoder ring, which she obtained by sending in box tops as a child. Caesar Cipher Data encryption techniques vary widely. The simplest encryption schemes are based on the string operation of substitution, in which each character in the plaintext string is replaced by some other character according to a fixed rule. For example, the Caesar Cipher scheme consists of replacing each letter by the letter that appears k positions later in the alphabet for some integer k, where k is a positive integer. (The alphabet is thought of as being arranged in a cycle, with A following Z.) In the original Caesar cipher, k had the value 3, so that each occurrence of A in the plaintext was replace by D, each B by E, . . ., each Y by B, and each Z by C. For example, we would encrypt the string \"IDESOFMARCH\" as follows: I D E S O F M A R C H plaintext add 3 to each character position to get: L G H V R I P D U F K ciphertext To decode the message, the receiver simply replaces each character in the cryptogram by the character which lies k positions earlier in the alphabet. This is obviously not a very secure scheme, since it is easy to break the code by simply trying the 25 possible values for the key value, k. Vigenere Ciphers It would certainly be harder to decode ciphertext that didn't have a constant offset (like the k = 3 in the Caesar Cipher). What if each original character could be offset by differing amounts? This can be done by using a keyword to specify several different displacements of letters rather than the single offset k. This is Vigenere cipher scheme. In this scheme, a keyword is added character by character to the plaintext string. Each resulting character is represented by its original position in the character set, plus the corresponding keyword letter position, and addition is carried out mod 26. For example, if the positions of A, B, C, . . . ,Z are given by 0, 1, 2, . . ., 25 respectively, and the keyword is DAGGER, the message \"IDESOFMARCH\" is encrypted as follows: I D E S O F M A R C H plaintext D A G G E R D A G G E keyword, repeated if necessary L D K Y S W P A X I L ciphertext 8 3 4 18 14 5 12 0 17 2 7 position of original characters 3 0 6 6 4 17 3 0 6 6 4 position of keyword character 11 3 10 24 18 22 15 0 23 8 11 (original+keyword) % 26 The receiver recovers the message by subtracting the characters in this keyword from those in the cryptogram. Substitution Table Ciphers Yet another substitution can be done by using a substitution table, which sets up the correspondence with which one character directly substitutes for the other. This is the type of puzzle seen in the newspaper section near the crossword. For example: A B C D E F G H I J K L M N O P Q R S T U V W X Y Z Q W E R T Y U I O P A S D F G H J K L Z X C V B N M The character in the second row of the table substitutes for the corresponding character in the first row. The string \"IDESOFMARCH\" would be encrypted using this substitution table as follows: I D E S O F M A R C H plaintext O R T L G Y D Q K E I ciphertext To decrypt, the receiver simply uses the substitution table in reverse. Since there are 26! (26 factorial, or approximately 1028) possible substitution tables, this scheme is considerably more secure than the simple Caesar cipher scheme. Experienced cryptographers can easily break the code, however, by analyzing frequency counts of certain letters and combinations of letters. Permutation Ciphers Another basic string operation which can be used in encryption schemes is permutation, in which the characters in the plaintext are rearranged. You can also break the original string into smaller blocks of characters, and rearrange within each block. For example, we might divide the message into blocks (substrings) of size 3 and permute the characters in each block as follows: Original Position: 1 2 3 Permuted Position: 3 1 2 Thus, the message \"IDESOFMARCH\" would be encrypted (after the addition of a randomly selected character X so that the string length is a multiple of the block length) as: I D E S O F M A R C H X plaintext D E I O F S A R M H X C ciphertext To decrypt the cryptogram, the receiver must know the key permutation and its inverse. Cryptogram's Position: 1 2 3 Permuted Position: 2 3 1 (this is the original string) Data Encryption Standard (DES) Many modern encryption schemes use a combination of substitution and permutation operations. Perhaps the best known is the Data Encryption Standard (DES) developed in the early 1970s by researchers at the IBM Corporation. It consists essentially of a permutation followed by a sequence of 16 substitutions, followed by a final permutation. The substitution operations are similar to those in earlier examples. Some use keyword addition (16 different keywords), and others use substitution tables. DES was adopted in 1977 by the National Institute of Standards and Technology as the standard encryption scheme for sensitive federal documents. It was revised in 1983, 1988 and 1993. In 2001, a new, even more complex standard known as the Advanced Encryption Standard (AES) was adopted. Public Key Systems Each of the preceding encryption schemes requires that both the sender and the receiver know the encryption key or keys. This means that although the cryptogram may be transmitted through an insecure public channel such as a telephone line, the key(s) must be transmitted separately in some secure manner, for example, by courier. This problem of maintaining secrecy of the key(s) is compounded when it(they) must be shared by several persons. Public key encryption schemes eliminate this problem by using two keys, one for encryption and one for decryption. These schemes are called public key because the encryption key is made public by the receiver to all those who transmit message to him or her; the decryption key, however, is known only to the receiver. The security of these schemes depends on it being nearly impossible to determine the decryption key if one knows only the encryption key. Rivest, Shamir, Adelman (RSA) Algorithm In 1978, R.L. Rivest, A. Shamir, and L. Adelman proposed one method of implementing a public key encryption scheme. In their RSA algorithm, the public-key is a pair of integers (e,n). One encrypts a message string M by first dividing M into blocks, M1, M2, . . ., Mk and converting each Mi block of characters to an integer Pi, which is in the range 0 through n-1. M is then encrypted by raising each block to the power e and reducing by using modulo n: M = M1, M2, . . . Mk becomes P1, P2, . . . Pk C = C1, C2, . . . Ck, where Ci = Pie % n The cryptogram C is decrypted by raising each block Ci to the power d and reducing by using modulo n, where d is a secret decryption key. To illustrate, suppose that the characters are converted to numeric values using the codes 0, 1, 2, . . . 25 for the letters A, B, C, . . ., Z, respectively, and the public-key pair (e, n) is (17, 2773). To encrypt the message M = \"IDESOFMARCH\" using the RSA algorithm, we divide M into two-character blocks M1, M2, . . ., M6. (We append a randomly selected character X to make the blocks come out evenly.) We represent each block Mi as an integer Pi. Pi is in the range 0 through 2772, and is found by concatenating the numeric codes of the characters that comprise the block: ID ES OF MA RC HX Mi 0803 0418 1405 1200 1702 0723 Pi 0779 1983 2641 1444 0052 0802 Ci where 0779 = 080317 % 2773, etc. For this encryption key, the corresponding decrypting key d = 157. Thus, we decode the cryptogram by calculating Pi = Ci157 % 2773. Now it's time to discuss how we chose (17,2773) for our public-key pair (e,n). The number n is the product of two large \"random\" primes p and q: n = p*q In the preceding example, we used the small primes 47 and 59 to simplify the computations (2773 = 47 * 59). However, Rivest, Shamir, and Adelman suggest that p and q have several hundred digits. The decrypting key d is then selected to be some large integer that is relatively prime to p-1 and q-1; that is, one that has no factors in common with either number. In our example, d = 157 has this property. The number e is then selected to have the property that e*d %((p-1)(q-1)) = 1 To break this code, one must be able to determine the value of d from values of n and e. Because of the manner in which d and e are selected, this is possible if n can be factored into a product of primes. Thus, the security of RSA encryption is based on the difficulty of determining the prime factors of a large integer. Even with the best factorization algorithms known today, this is a prohibitively time-consuming task. Although research on factorization continues, no efficient algorithms have been found that allow even super computers to factor numbers several hundred digits long in less than years. Pretty Good Privacy (PGP) The U.S. government takes encryption very seriously on two fronts. It wants to protect its sensitive information. It also wants to be able to decrypt supposedly private communications between individuals who might pose a threat to the U.S. In 1991, Phil Zimmerman wrote a freeware version of the RSA algorithm and called it Pretty Good Privacy (PGP). He was the target of a three-year criminal investigation, because the government held that US export restrictions for cryptographic software were violated when PGP spread all around the world. Despite the lack of funding, the lack of any paid staff, the lack of a company to stand behind it, and despite government persecution, PGP nonetheless became the most widely used email encryption software in the world. In 1996 the government finally dropped its case. Zimmerman founded PGP Corporation, which is currently a very highly regarded data security company."
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_InstantiableClasses_index.html?C=D;O=D.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/InstantiableClasses Index of /Classes/Cs241/Examples/InstantiableClasses NameLast modifiedSizeDescription Parent Directory - TestFraction.java 2015-09-01 13:57 936 TestCircle.java 2015-09-01 13:57 494 FractionArrayTest.java 2015-09-01 13:57 1.6K Fraction.java 2015-09-01 13:57 3.1K Circle.java 2015-09-01 13:57 1.6K"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_NumbersOperatorsCharacters_index.html?C=N;O=A.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/NumbersOperatorsCharacters Index of /Classes/Cs241/Examples/NumbersOperatorsCharacters NameLast modifiedSizeDescription Parent Directory - CharASCII.java 2015-09-01 13:57 949 Numerics.java 2015-09-01 13:57 686 PrePostIncr.java 2015-09-01 13:57 1.2K Primitives.java 2015-09-01 13:57 1.2K TestEscape.java 2015-09-01 13:57 862 TestInputDialog.java 2015-09-01 13:57 688 TryUnicode.java 2015-09-01 13:57 422 Typecasting.java 2015-09-01 13:57 603"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_2DArrays_index.html?C=S;O=A.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/2DArrays Index of /Classes/Cs241/Examples/2DArrays NameLast modifiedSizeDescription Parent Directory - MultiplicationTable...>2015-09-01 13:57 1.6K"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/policyst.html.json",
    "body_content": "University of Wisconsin\u2013Parkside: Computer Science Computer Science University of Wisconsin\u2013Parkside UW\u2013Parkside HOME 262-595-2314 CS Account Policy Lab Schedule Connecting to Lab - UW-Parkside Pages Home Computer Science Major Computer Science Department Department Webpages Computer Science I App Factory UWP CS Policy Department of Computer Science University of Wisconsin-Parkside Computer Account Policy This policy is established by the Department of Computer Science to provide the department\u2019s students, staff and faculty the computational and network resources needed to meet their recognized educational, research and administrative commitments. Due to the limited nature of available computing and network resources, all users are expected to used good judgment in sharing these resources and to avoid wasteful and abusive activities. Computer and/or network usage not necessary to meet recognized educational, research and administrative commitments to the Department of Computer Science or to UW-Parkside will be considered wasteful, including unnecessary storage of disk files, careless execution of resource-consuming processes, or the generation of excessive network traffic or printed output. In addition to adhering to the general guidelines above, the following specific limitations are placed on Department of Computer Science computer account holders: Nobody else may use accounts assigned to you, even if he or she has your permission. You are to use only accounts assigned to you. Your account is provided for legitimate activities directly relating to the mission of UW-Parkside. Any other use may result in loss of privileges. Under certain circumstances, it may be necessary for a staff member to examine your files (protected or otherwise). You are responsible for the content and size of all files in accounts assigned to you. Disk files not related to legitimate activities directly relating to the mission of UW-Parkside and/or which consume large amounts of space may be removed without warning. Processes which consume excessive system resources, or which are objectionably degrading systemresponse or network access may be terminated without warning by system staff. You may not harass or threaten other users on this system or any computer with which this system communicates. You may not attempt to acquire, access or modify passwords, files, accounts or other information that does not belong to you. You may not attempt to crash, violate the integrity of, or adversely affect the activities of the computer system or the network. Distasteful or offensive displays and printouts are not permitted. Physical abuse, mishandling and modification of workstations, printer and other hardware is not permitted. Computer operating system and related software are operated at UW-Parkside under software licenseagreements. Under these agreements, the software may be used for instructional, research and administrative purposes only. It is a violation of these agreements, and of Wisconsin statutes, to copy or transmit this software in printed or machine-readable form, or to use the software or computer system for personal gain, or to place a third party in a position of commercial advantage. Occurrences of misconduct in any of these areas may result in loss of computer and/or network access; flagrant violation may result in legal action. NO Food or Drinks are allowed in the lab! The designated location for eating/drinking is the Brickstone Grill & Eatery. I have read and understood the above policy. I understand that failure to abide by the letter and spirit of this policy will result in the loss of my privileges. I further realize that this policy applies to all accounts that I may have on this campus. \u00a9 University of Wisconsin-Parkside \u2022 900 Wood Road \u2022 PO Box 2000 Kenosha, WI 53141-2000"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_LiangLabs_Lab10_prelab10.html.json",
    "body_content": "CSCI 241 Labs: PreLab 10 CSCI 241 Labs: PreLab 10 Getting to the Point Introduction During lab this week you will develop a class to represent 2D points. This document is meant to start you thinking about the design of the Point class. As you should recall from high school mathematics, two dimensional points have an x component and a y component. That's about it. There is no need to read any further. The class could be defined as: public class Point{ public double x; public double y;} In the main we can create Points and access the x and y values without any problems. For example, public static void main (String [] args){ Point p = new Point(); p.x = 5.0; p.y = 7.0; System.out.println(\"(\" + p.x + \", \" + p.y + \")\");} This all works, and there is nothing wrong with it, except that it is not very object-oriented. This is exactly the way points are implemented in languages like C and Pascal. Java, which is object-oriented, should be able to do better. Data Encapsulation Java gives us the ability to hide and protect data within the class. When we declare the x and y values to be private, our class can control access to them. In fact, we have no problem with other objects seeing the x and y values, we just don't want them to be able to change them except through our explicit permission, with a method. You can accomplish this goal by declaring each instance variable to be private and then writing accessor methods to return their values. To allow other objects to update the instance variable values, we write mutator methods. Our class now becomes something like: public class Point{ private double x; private double y; // get the x value - similar code needed for y public double getX () { return x; } // set the y value - similar code needed for x public void setY (double newValueForY) { y = newValueForY; }} Question: How should you modify the println statement in the main() method above to work with the new class definition? Constructing Points Now there is another problem with our main program. The two lines: p.x = 5.0;p.y = 7.0; will generate syntax errors, since x and y are no longer public. We need a way to initialize our points, i.e., to set the x and y values at the time the Point is created. This is exactly why Java includes constructors. A constructor is a method that allows us to initialize an object's data members at the time it is created. The Point class should have two constructors. The default constructor takes no arguments and sets the point to (0, 0). The second constructor requires two arguments, the initial x value and initial y value. The following lines inside the main program would create points using each constructor. Point p = new Point(); // creates Point (0,0) using default constructorPoint q = new Point (2.3, -7); // creates Point (2.3,7) Question: What should the constructors look like in the Point class definition? Other Point Methods There are a number of other basic operations on points. In Java each of these would be implemented as a public method. String toString() converts the point to a String for printing. Look at the println statement given in the sample main method above. Every time we want to print a point, we want it to appear as (x, y) where the x and y values are filled in. Our toString() method should format the point for us. The body of this method will be return \"(\" + x + \", \" + y + \")\"; The println becomes System.out.println(p.toString()); Aside: While this is an advanced topic, it is worth noting that Java is actually smart enough to invoke the toString() method automatically when printing. The println() could be written as: System.out.println(p); which would print the same result. double distanceToOrigin() calculates the distance from the point to (0, 0). As you should recall from high school math, the distance formula is: double distanceTo(double px, double py) calculates and returns the distance from the point to (px, py). As you should recall from high school math, the distance formula here is: Questions: What will the code look like in the main() method that invokes each of the distance methods? The last method is an instance method that takes two doubles as parameters. Do you think it could be written to take a second Point as a single parameter, instead? Testing Point Methods The Point class now has: Two private data members Two constructors Two accessor (\"getter\") methods Two mutator (\"setter\") methods A toString() method Two distance methods Seeing that the class compiles is not nearly enough to know that all its methods work correctly. We need to test each method thoroughly. This is one of the real strengths of BlueJ. BlueJ lets us instantiate objects and run their methods without writing any additional code. The disadvantage of testing using BlueJ's object bar is that each test must be run manually. In real world development situations, code is tested and retested and retested. Manual testing would be very inefficient. Tests are typically run through a main program that is responsible for nothing but testing. To retest a program simply requires that you rerun the main. Testing is not easy, either. To guarantee that a method works, we should test it over several different cases. For example, the distanceTo(double px, double py) should be tested for several arbitrary points. It should also be tested with two points that have the same x value (vertical to each other). Likewise it should be tested for two points that have the same y value (horizontal to each other). Finally, what happens if you ask for the distance from a point to itself? Questions: How should we test the constructors? What tests should be run on the accessors and mutators? How many different test cases can you think of for the distanceToOrigin() method? The Point of it All There are many places where having a Point class is useful. For example, two points determine a line. Three nonlinear points give us a triangle. More complex polygons just require more points. In Computer Graphics, each pixel on the screen is treated as a point. If we just consider triangles, three of our Points determine the triangle. Using methods from our Point class we can determine the perimeter of the triangle. Using our methods and the methods from the ACM graphics library, we can draw the triangle to the screen. In this week's lab you will get a chance both to create a Point class and exercise it in some interesting applications."
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_Methods.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/Methods Index of /Classes/Cs241/Examples/Methods NameLast modifiedSizeDescription Parent Directory - MultiplicationTable...>2015-09-01 13:57 1.8K Temperature.java 2015-09-01 13:57 790 TestMax.java 2015-09-01 13:57 561"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_LiangLabs_Lab02_prelab2.html.json",
    "body_content": "CSCI 241 Labs: PreLab 2 CSCI 241 Labs: PreLab 2 Basic Programming and Debugging Techniques Introduction So far in the textbook, we have seen programs written correctly and ready to run. There is no hint of the process involved to get them into their final form. However, there are a lot of ways to make mistakes when even writing a \"simple\" program. Any programmer who claims to never make mistakes is lying! Programming is known to be frustrating. Error messages can be confusing and intimidating. Experienced programmers expect this and learn to work through them, one by one. A language like Java is very complex. As one learns a new language, errors seem to occur way too often. Keep in mind that a good programmer is also part detective, observing clues wherever they may be found in order to correct the errors which inevitably occur. Types of Errors Errors can appear in your programs in any part of the design or implementation process. We want to find errors as early in the process as possible. We will begin by concentrating on the most common types of coding errors which occur when first learning a programming language: syntax errors and logic errors. A syntax error is one that the compiler detects. A Java compiler can't figure out what you intend to do in your program, it only recognizes that it cannot translate what you wrote into byte code. This is why a syntax error is also called a \"compile-time\" error. Some examples of syntax errors include: forgetting a semi-colon(;) at the end of an assignment statement mispelling a reserved word using a variable without declaring it first BlueJ displays, at most, one error message at a time, highlighting the line of code where it detected the problem. Sometimes the error is on that line and sometimes it is caused by an error in a previous line of code. Other IDEs may show multiple error messages after a program is compiled. Sometimes fixing one problem fixes others, and sometimes fixing the original problem illuminates additional problems in later code. It is up to you, as the programmer, to decide the type of correction(s) needed. A logic error occurs when your program runs but does not give you the result you expect. This is why it's important to create test data, along with predicted results, when you design a program. Some examples of logic errors include: multiplying 2 values when you meant to divide one by the other using one variable in a formula when you meant to use another initializing a variable to the wrong value Aside: A third type of error which does not occur quite as often is a runtime error. These types of errors usually come from erroneous input values, such as entering a letter when the program expects to read a number. Programmers can spend many lines of code making sure input values are appropriate. If the input is invalid, the program will return to the data entry page and ask for the information again so that bad data doesn't make it any further along in the process. We do not yet have the tools to build this kind of coding into our programs, but you will have a chance to do so in a future chapter. Isolating and Fixing Errors Java is notorious for having many decidedly unhelpful error messages. In today's lab, you will see some of Java's error messages and begin to associate them with common mistakes. If you understand the error message right away, you can easily type the correction in the indicated line. To fix more mysterious errors, there are three main debugging techniques (which work in any language and IDE): When learning a new language, compare what you wrote to similar lines in a working example such as found in the textbook. A little mistyping can cause a big problem! Use a System.out.println() statement to print the value of any variable, at any step along the way. Sometimes we can see that a variable starts out with the correct value but gets an incorrect value inside the program. Adding print statements within the code lets us see the current value. For example, this line prints the value of a variable named total: System.out.println(\"total = \" + total); If total was holding the value 25, you would see this line printed: total = 25 When printing the value that a variable holds, try to get in the habit of printing the name of the variable before the value. It really helps when you need to print the values of more than one variable. Temporarily comment out the indicated line in order to see if the earlier lines are okay. We do this by inserting two forward slashes (//) at the beginning of the line. Once we know the other lines are working, we can copy this line and edit the copy by removing the forward slashes and making the correction. If we compile and run the program and find it still isn't right, we can see both the original and how we changed it at the same time. Later this semester: A fourth technique is to use an IDE's built-in debugger program. Most IDEs have them these days, including BlueJ. Feel free to explore BlueJ's debugger on your own if you wish, but try to do without it for this week's lab exercises. Future Coursework Preview: Software Engineering (studied in a 2-course sequence here at UW-Parkside) is defined as the process of designing and implementing large programs and systems. In today's world, some well-known programs (such as Google or Microsoft Office) can involve hundreds and thousands of programmers. Managing this complexity is very different than managing your own work. However, since large programs consist of many small parts working together, we can use a software engineering technique called the Personal Software Process to help understand and improve our code. Watts Humphrey, whom some call the \"father of software quality\", defined the process as follows: The personal software process (PSP) is a self-improvement process designed to help you control, manage, and improve the way you work. It is a structured framework of forms, guidelines, and procedures for developing software. Properly used, the PSP provides the historical data you need to better make and meet commitments and it makes the routine elements of your job more predictable and more efficient. This process tells us to keep track of what happens during the development of software, writing down what happens along the way in order to make things work more smoothly when tackling a similar project. As you might imagine, this process can be very tedious and for a simple program, can even take longer than the programming itself. We won't require you to do this type of detailed analysis in lab this week. But, keep the reasoning in mind while you work with the programs, recording and deciphering error messages in the hopes of figuring things out more quickly next time."
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_Methods_index.html?C=M;O=D.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/Methods Index of /Classes/Cs241/Examples/Methods NameLast modifiedSizeDescription Parent Directory - TestMax.java 2015-09-01 13:57 561 Temperature.java 2015-09-01 13:57 790 MultiplicationTable...>2015-09-01 13:57 1.8K"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_BasicArrays_index.html?C=M;O=A.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/BasicArrays Index of /Classes/Cs241/Examples/BasicArrays NameLast modifiedSizeDescription Parent Directory - CopyArrayExample.java 2015-09-01 13:57 942 InstantiateFillPrint..>2015-09-01 13:57 869 ParameterPrint.java 2015-09-01 13:57 963 Stats.java 2015-09-01 13:57 1.8K TryArrayParam.java 2015-09-01 13:57 2.9K"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_BooleanIfElseSwitch_index.html?C=N;O=D.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/BooleanIfElseSwitch Index of /Classes/Cs241/Examples/BooleanIfElseSwitch NameLast modifiedSizeDescription Parent Directory - PrintBoolean.java 2015-09-01 13:58 2.2K NestedIfs.java 2015-09-01 13:58 1.1K DemoSwitch.java 2015-09-01 13:58 1.1K DemoPrintf.java 2015-09-01 13:58 436 DanglingElse.java 2015-09-01 13:58 690 CompareDoubleValue.java2015-09-01 13:58 649 BooleanTests.java 2015-09-01 13:58 1.0K"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_Loops_index.html?C=M;O=A.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/Loops Index of /Classes/Cs241/Examples/Loops NameLast modifiedSizeDescription Parent Directory - BasicWhile.java 2015-09-01 13:57 1.1K ForLoopMystery.java 2015-09-01 13:57 464 MultTable.java 2015-09-01 13:57 1.3K NestedFor.java 2015-09-01 13:57 2.1K RectangleOfStars.java 2015-09-01 13:57 928 Stats.java 2015-09-01 13:57 1.6K Tables.java 2015-09-01 13:57 1.6K Triangles.java 2015-09-01 13:57 696 WhileDoWhile.java 2015-09-01 13:57 2.2K WhileFor.java 2015-09-01 13:57 1.2K"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_StringsStringBuilders_index.html?C=N;O=D.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/StringsStringBuilders Index of /Classes/Cs241/Examples/StringsStringBuilders NameLast modifiedSizeDescription Parent Directory - TryStringMethods.java 2015-09-01 13:57 1.2K TryConcatenation.java 2015-09-01 13:57 394 TestCharData.java 2015-09-01 13:57 1.0K StringLoops.java 2015-09-01 13:57 452 StringBuilderLoopDel..>2015-09-01 13:57 1.2K SBExamples.java 2015-09-01 13:57 1.2K ReverseAStringBuilde..>2015-09-01 13:57 635 GuessOutput.java 2015-09-01 13:57 708"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_BasicArrays_index.html?C=N;O=A.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/BasicArrays Index of /Classes/Cs241/Examples/BasicArrays NameLast modifiedSizeDescription Parent Directory - CopyArrayExample.java 2015-09-01 13:57 942 InstantiateFillPrint..>2015-09-01 13:57 869 ParameterPrint.java 2015-09-01 13:57 963 Stats.java 2015-09-01 13:57 1.8K TryArrayParam.java 2015-09-01 13:57 2.9K"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_Methods_index.html?C=N;O=D.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/Methods Index of /Classes/Cs241/Examples/Methods NameLast modifiedSizeDescription Parent Directory - TestMax.java 2015-09-01 13:57 561 Temperature.java 2015-09-01 13:57 790 MultiplicationTable...>2015-09-01 13:57 1.8K"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_2DArrays_index.html?C=D;O=D.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/2DArrays Index of /Classes/Cs241/Examples/2DArrays NameLast modifiedSizeDescription Parent Directory - MultiplicationTable...>2015-09-01 13:57 1.6K"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_InstantiableClasses_index.html?C=S;O=A.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/InstantiableClasses Index of /Classes/Cs241/Examples/InstantiableClasses NameLast modifiedSizeDescription Parent Directory - TestCircle.java 2015-09-01 13:57 494 TestFraction.java 2015-09-01 13:57 936 Circle.java 2015-09-01 13:57 1.6K FractionArrayTest.java 2015-09-01 13:57 1.6K Fraction.java 2015-09-01 13:57 3.1K"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_BooleanIfElseSwitch_index.html?C=M;O=D.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/BooleanIfElseSwitch Index of /Classes/Cs241/Examples/BooleanIfElseSwitch NameLast modifiedSizeDescription Parent Directory - PrintBoolean.java 2015-09-01 13:58 2.2K NestedIfs.java 2015-09-01 13:58 1.1K DemoSwitch.java 2015-09-01 13:58 1.1K DemoPrintf.java 2015-09-01 13:58 436 DanglingElse.java 2015-09-01 13:58 690 CompareDoubleValue.java2015-09-01 13:58 649 BooleanTests.java 2015-09-01 13:58 1.0K"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_StringsStringBuilders_index.html?C=M;O=D.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/StringsStringBuilders Index of /Classes/Cs241/Examples/StringsStringBuilders NameLast modifiedSizeDescription Parent Directory - TryStringMethods.java 2015-09-01 13:57 1.2K TryConcatenation.java 2015-09-01 13:57 394 TestCharData.java 2015-09-01 13:57 1.0K StringLoops.java 2015-09-01 13:57 452 StringBuilderLoopDel..>2015-09-01 13:57 1.2K SBExamples.java 2015-09-01 13:57 1.2K ReverseAStringBuilde..>2015-09-01 13:57 635 GuessOutput.java 2015-09-01 13:57 708"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_Loops_index.html?C=N;O=A.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/Loops Index of /Classes/Cs241/Examples/Loops NameLast modifiedSizeDescription Parent Directory - BasicWhile.java 2015-09-01 13:57 1.1K ForLoopMystery.java 2015-09-01 13:57 464 MultTable.java 2015-09-01 13:57 1.3K NestedFor.java 2015-09-01 13:57 2.1K RectangleOfStars.java 2015-09-01 13:57 928 Stats.java 2015-09-01 13:57 1.6K Tables.java 2015-09-01 13:57 1.6K Triangles.java 2015-09-01 13:57 696 WhileDoWhile.java 2015-09-01 13:57 2.2K WhileFor.java 2015-09-01 13:57 1.2K"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_LiangLabs_Lab05_prelab5.html.json",
    "body_content": "CSCI 241 Labs: Lab 5 CSCI 241 Labs: Prelab 5 The BlueJ Debugger You will often hear a programmer talk about \"debugging\" a program. The origin of this statement comes from the days when computers were much bigger; full of vacuum tubes and switches. A moth was found fried to a vacuum tube inside a computer. Removing the moth and replacing the vacuum tube fixed the problem. A debugger is a tool which helps a programmer find errors (\"bugs\") in a program. It allows you to run the program under closely controlled conditions. All debuggers provide a couple of basic features to help programmers find and remove errors. Controlling Execution One of the dangers of using loops in programs is that it is very easy to write a program that contains an infinite loop. The program will run forever without halting! Debuggers allow the programmer to interrupt the execution of the program, check to make certain it isn't in an infinite loop, and then either continue or end the program. Using a debugger, you can also make your program stop when it reaches a particular statement. You do this by setting a breakpoint at that line of code. While at a breakpoint, you can examine your program and choose to let it continue or to the end its execution. Most debuggers also allow the programmer to step through their code line by line. This is particularly useful if you know you are close to where the bug occurs. You set a breakpoint just before the bug and then step through the code looking for the error. Inspecting the Program's State (variables) Discovering that a program has a bug is the easy part. The difficult part is isolating and removing it. While the program is interrupted you can inspect the values of the program's variables. This lets you quickly determine if an error has occurred and gives good insight into the nature of the error. The BlueJ IDE (Integrated Development Environment) includes its own debugger. The BlueJ debugger is discussed as part of the BlueJ Tutorial on pages 27-30."
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_NumbersOperatorsCharacters_index.html?C=M;O=A.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/NumbersOperatorsCharacters Index of /Classes/Cs241/Examples/NumbersOperatorsCharacters NameLast modifiedSizeDescription Parent Directory - CharASCII.java 2015-09-01 13:57 949 Numerics.java 2015-09-01 13:57 686 PrePostIncr.java 2015-09-01 13:57 1.2K Primitives.java 2015-09-01 13:57 1.2K TestEscape.java 2015-09-01 13:57 862 TestInputDialog.java 2015-09-01 13:57 688 TryUnicode.java 2015-09-01 13:57 422 Typecasting.java 2015-09-01 13:57 603"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_LiangLabs_Lab06_lab6.html.json",
    "body_content": "CSCI 241 Labs: Lab 6 CSCI 241 Labs: Lab 6 Going Loopy There are 5 checkpoints , including the clean-up checkpoint, in this lab. Work together with your partner using just one of your accounts. CHANGE WHO IS CONTROLLING THE COMPUTER AFTER EACH CHECKPOINT! If you need help with any exercise, raise your hand. Copy the directory /home/student/Classes/Cs241/Labs/Lab06 to your account. Change directories into Lab06 and start BlueJ by entering bluej&. This lab is much like last week's lab, in that it emphasizes using loops and ifs to solve interesting problems. The only difference is that the problems this week are probably a bit more difficult, but then you have an additional week of learning under your belts, too. Finding Prime Numbers Recall from high school math that a prime number is one that can only be (evenly) divided by 1 and itself. Open the PrimeNumber class. This file contains listing 5.15 found on page 189 of your text. This program finds and prints the first 50 prime numbers. Examine the code and run the program to see its output. It can be improved in a number of ways - and guess what you get to do now! Your tasks for this checkpoint: Modify the code so that the primes print in 10 columns, each 6 characters wide. The program only finds the first 50 primes. Modify the program so that it finds and prints all prime numbers less than 5,000. It should then print the total number of primes it found. Hint: The final prime before 5,000 is 4,999. Note: By default, BlueJ's terminal window will limit the lines of output you see, but you can change that setting by choosing Options-Unlimited Buffering. 1 Be prepared to answer the following questions: Why does the inner for loop start at 2, rather than 1? Why does the inner for loop stop at number/2 instead of number? Could we reduce the upper bound on divisor even further? Explain. Hint: The answer is yes. The real question is why. Explain why we use break to exit the inner for loop. Can you modify the code so you do not use a break? Perfect Numbers Since we are working with number sequences, let's try another one: A number is perfect if the sum of all its positive divisors, excluding itself, add to be the original number. For example, 6 is perfect because 1 + 2 + 3 = 6. Similarly, 28 is perfect because 1 + 2 + 4 + 7 + 14 = 28. Perfect numbers are really pretty rare. There are only 4 of them less than 10,000. Open the Perfect class. It contains a for loop that counts from 1 to 10,000. All that's missing is the code to find all the divisors of i and sum them. Add this code. Hint: Finding the divisors of i is similar to what you did in checking to see if a number was prime. The biggest difference is that we aren't going to stop when we find one divisor. We need to find them all and sum them. Complete the Perfect number program so that it find all perfect numbers less than 10,000. 2 Show us your revised code and demonstrate how it runs. Be ready to answer the following questions: We declared int sum = 0; inside the outer for loop. Would it work just as well to place this line before the loop? Explain why or why not. There are only 49 known perfect numbers. The last one was discovered in 2016 and is 44,677,235 digits long. That isn't the number! That is how many digits it contains! Do you think there are more? Computing PI You all know that Pi is a constant whose value is approximately 3.141592653589793238462643383279502884197169399375105820974944592307816406286... but that its digits go on forever. Did you ever wonder how Pi is calculated? There are numerous ways to do so. For this exercise, you will use an algorithm that works and is simple to program (but others exist that converge faster than this one). Here is the mathematical formula: 1 1 1 1 1 1 Pi = 4 * (1 - --- + --- - --- + --- - ... - ------- + ----------) 3 5 7 9 2*i+1 2*(i+1)+1 Open the ComputePi class. Your sum variable should keep the sum of the fractions seen in the parentheses in the above formula. Each time the loop runs, you should add ONE fraction to that sum. (Note: the sign variable is there to help you change whether you are adding or subtracting the fraction. Don't forget to update it at the end of the loop body, if you choose to use it.) As you work, feel free to \"tweak\" the existing code if you wish. Change the limit on the for loop so that it runs through the loop 1,000,000 times. Before you run it again, comment out the printf() statement that is inside the loop for obvious reasons. 3 Show us this program when you are ready. How many digits were accurately calculated when the loop ran only 100 times? How many digits were accurately calculated with the loop ran 1,000,000 times? Print Pattern Open the PrintPattern class. It contains a complete program to print the pattern: 1 1 2 1 2 3 1 2 3 4 1 2 3 4 5 1 2 3 4 5 6 KEEP THIS CODE! Add additional loops, so that it follows this pattern with 1 2 3 4 5 6 1 2 3 4 5 1 2 3 4 1 2 3 1 2 1 Now, add yet another loop, so that the entire pattern is 1 1 2 1 2 3 1 2 3 4 1 2 3 4 5 1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 1 2 3 4 1 2 3 1 2 11 1 2 1 2 3 1 2 3 4 1 2 3 4 5 1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 1 2 3 4 1 2 3 1 2 1 1 1 2 1 2 3 1 2 3 4 1 2 3 4 5 1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 1 2 3 4 1 2 3 1 2 1 4 Show us your completed program. After the Lab Return to Firefox, log onto Canvas and print the next programming assignment, #5, if you haven't already. Be sure to exit Firefox before you log out and leave the lab. 5 Show us that you have logged out, turned off your monitor, cleaned up, and pushed in your chairs for this last checkpoint."
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_InstantiableClasses_index.html?C=S;O=D.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/InstantiableClasses Index of /Classes/Cs241/Examples/InstantiableClasses NameLast modifiedSizeDescription Parent Directory - Fraction.java 2015-09-01 13:57 3.1K FractionArrayTest.java 2015-09-01 13:57 1.6K Circle.java 2015-09-01 13:57 1.6K TestFraction.java 2015-09-01 13:57 936 TestCircle.java 2015-09-01 13:57 494"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_LiangLabs_Lab04_lab4.html.json",
    "body_content": "CSCI 241 Labs: Lab 4 CSCI 241 Labs: Lab 4 Think Before you Leap There are 5 checkpoints , including the clean-up checkpoint, in this lab. You and your partner should work together using just one of your accounts. CHANGE WHO IS CONTROLLING THE COMPUTER AFTER EACH CHECKPOINT! If you need help with any exercise, raise your hand. Copy the lab materials to your account. They are located in the directory /home/student/Classes/Cs241/Labs/Lab04. If you forgot how to copy, refer to lab exercises 1 or 2. Change directories into Lab04 and start BlueJ by entering bluej&. For this lab, you and your partner should get out some paper and some pens or pencils. Implementing Pseudocode Open Project Grades in the Lab04 subdirectory. This project contains a program to calculate student grades from exam scores. Compile and run the LetterGradeCalculator class. Enter any three exam scores. From the output it should be obvious that the average and letter grade are not calculated correctly. Follow the pseudocode provided in the prelab to finish the coding in these sections: Finish the assignGrade section so that it prints the correct letter grade Finish the calculateAverage section so that it prints a double Finish the canContinue section by setting canContinue to hold true when the average holds 70 or above, and false otherwise. Thoroughly test your program. Do not clear the output window - we'll want to look at it when we check you off. 1 Tell us the answers to the questions. Be prepared to answer the following questions: Printing if the student could continue on to the next semester (CSCI-242) could have been written without a boolean variable. In your opinion, which way produces more easily readable code? Could the program assign a letter grade using a switch statement, instead of the multiple if-else statements? Why or why not? Clear the output window and close the Grades project. The Dangers of Pseudocode One of the dangers of pseudocode is that students often confuse it with source code. Pseudocode lays out the logic of the algorithm. It does not include the syntactic details of any particular language. Absolute value is defined as the positive equivalent of any number. In mathematics we typically write it using vertical bars. |-3| = 3 |3| = 3 Pseudocode to take the absolute value of a number n is: if n < 0 print a message saying changing signs n = -n fi (Sometimes programmers use fi in their pseudocode to indicate where the if ends.) Open project Hmmmmm. Compile and run the AbsoluteValue main() method with several input values of your choice, both positive and negative. This program is supposed to take the print the absolute value of the number entered. It doesn't, even though the code closely follows the pseudocode. Isolate the bug and remove it so that it works correctly. 2 Show us the corrected program. Be prepared to answer the following question: Explain what was wrong with the original program, and how you corrected the problem. Was the problem in the pseudocode or in the translation of the pseudocode to Java? Clear the output window and close project Hmmmmm. Finding the Minimum Now it is your turn. Finding the minimum of two integers is easy. Here is the pseudocode: findMinOf2 coding: if first < second minimum = first else minimum = second fi end findMinOf2 coding Finding the minimum of three or four integers is more difficult. On a separate sheet of paper, write pseudocode for two sections of code: one that calculates the minimum of three integers and one that calculates the minimum of four numbers. Hints: Watch out for equality. Your code should still determine the minimum even if two of the numbers hold the minimum value. There are multiple approaches to this problem. You may use if statements with && in them. You may use nested ifs (i.e., an if inside another if). Open project Min and use the editor to examine the MinFinder class. The MinFinder class contains sections that determine the minimum of 2, 3 and 4 integers. Notice that the code is already implemented that gets values for the integers. Close the editor and compile and run the main() method. The program should run, but returns incorrect results. The sections to determine the minimum values are not yet written. Edit the class MinFinder. Replace the code in all three sections by following your pseudocode for each. When ready, thoroughly test each section by running the main() method with differing sets of values. 3 Show us your pseudocode and completed and tested code. Be ready to answer the following questions: Was your pseudocode correct for all three sections? Which technique did you use? Could it be easily extended to work on larger groups of integers? Clear the output window. Close the project Min. Changing Colors Open project CircleColor. You have been working on lots of main() methods in these first chapters and it's getting a little tedious. The cool thing about programming is that once you know these basic techniques, you can \"plug them in\" to more complicated programs and classes. Use the editor to examine the Demo class. It also contains a main() method, but with very different contents than what you have seen so far in the textbook. Remember how you create a Scanner object for the keyboard? You write: Scanner keyboard = new Scanner(System.in); We know that keyboard is the name of this Scanner, and that when we wish to read input data, we use keyboard. in front of a method which describes the type of data we are reading, such as nextInt(). Instead of Scanner objects, the Demo class works with a CirclePicture object. The CirclePicture class was written by Dr. Hansen and exists inside this BlueJ project. When we wish to use the CirclePicture object named myCircles, we can write myCircles. in front of an action we wish it to do. The Demo program draws eight circles in the picture. For each circle, we choose a color and radius before it can be drawn. Can you see how the coding works so far? The part which asks for a color is hidden inside the CirclePicture class. Part of the code uses a keyboard Scanner to list the colors available and ask the user for a color number. After finding out the color and setting the radius, there is code in the CirclePicture class which uses this information to draw the circle in a window. Currently, the circle drawn will always use the color CYAN (this is a light blue). See how this works by compiling and running the Demo program main() method. You and your partner will complete the CirclePicture class to allow the user to select a variety of colors. The Demo program will then use the selected color to draw the circle. To do this, open CirclePicture in the editor window. Look for the Scanner. The input prompt currently lists only one color to choose from. However, there are many more! Legal color names must be written as Color.NAME, where NAME can be any of this list: BLACK, WHITE, BLUE, RED, YELLOW, CYAN, DARK_GRAY, ORANGE, GRAY, GREEN, PINK, LIGHT_GRAY, MAGENTA. Add 7 or more colors to the options given in the input dialog to give you a total of at least 8 choices. You can use the \\n character within a String inside one print() statement to make all colors appear in the same prompt line, if you prefer that look. The value returned from the input dialog needs to be translated into a matching Color object. The if statement in the chooseNewColor() method takes care of this translation. Add code to expand the if statement so that it returns the appropriate color for each choice. When ready, thoroughly test your changes using the Demo class. Feel free to draw more circles in the Demo class if you wish. 4 Show us your completed and tested program. Could you have written this code with a switch statement? Close project CircleColor. After the Lab Your new programming assignment is available on Canvas. 5 Show us that you have logged out, cleaned up, turned off your monitor and pushed in your chairs for this last checkpoint."
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_BasicArrays_index.html?C=N;O=D.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/BasicArrays Index of /Classes/Cs241/Examples/BasicArrays NameLast modifiedSizeDescription Parent Directory - TryArrayParam.java 2015-09-01 13:57 2.9K Stats.java 2015-09-01 13:57 1.8K ParameterPrint.java 2015-09-01 13:57 963 InstantiateFillPrint..>2015-09-01 13:57 869 CopyArrayExample.java 2015-09-01 13:57 942"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_2DArrays_index.html?C=D;O=A.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/2DArrays Index of /Classes/Cs241/Examples/2DArrays NameLast modifiedSizeDescription Parent Directory - MultiplicationTable...>2015-09-01 13:57 1.6K"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_Methods_index.html?C=N;O=A.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/Methods Index of /Classes/Cs241/Examples/Methods NameLast modifiedSizeDescription Parent Directory - MultiplicationTable...>2015-09-01 13:57 1.8K Temperature.java 2015-09-01 13:57 790 TestMax.java 2015-09-01 13:57 561"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_LiangLabs_Lab10_lab10.html.json",
    "body_content": "CSCI 241 Labs: Lab 10 CSCI 241 Labs: Lab 10 Using and Defining Objects There are 5 checkpoints , including the clean-up checkpoint, in this lab. Work together with your partner using one of your accounts. CHANGE WHO CONTROLS THE COMPUTER AFTER EACH CHECKPOINT! If you need help with any exercise, raise your hand. Copy the Lab10 directory from the course directory. If you have forgotten how, refer to the handouts for labs 1 or 2. Everything you need for the lab exercises today is contained in this directory (except your outstanding intellect). Change directories into Lab10 and start running BlueJ. Using Objects in Interactive Method Calls Open the PictureDemo project. The classes in this project are a simplified version of some of the classes in the acm.graphics library. They may be used to create images. They also contain one \"extra\" method, move(). You are free to use move() in this part of the lab, but it will not be available for the next checkpoint. To work with this project, remember the coordinate system used by Java. Java places (0,0) in the upper left corner of the window. The x values get larger as you move to the right. The y values get larger as you move down. The units are in terms of \"pixels\", or dots on the screen. With our lab's screen resolution, 100 pixels is about 1.25 inches. Compile the project by clicking on the Compile button. Right click on the GraphicsProgram class and choose new GraphicsProgram(). BlueJ will prompt you for an object name, giving you the default name graphics1. Replace this with the name picture and then click on the \"OK\" button. A window should appear on the screen and an object icon should appear in BlueJ's object bench. We will add objects to the window to create a drawing. Right click on the GRect class and choose new GRect(double x, double y, double width, double height). When asked for a name, type wall as the new GRect object's name. Supply the parameters 100, 200, 200, 200, in that order. wall now appears on BlueJ's object bench. Note that wall has been instantiated, but is not yet displayed. Right click on picture and choose the add() method. In the window that appears, enter wall as the object to be added. The graphics window should now contain a square at the location (100,200) with a side length of 200 pixels. that will make it appear. Note that the square is currently a simple line drawing. We want to make the wall red. This requires two steps: Right click on wall on the object bench and choose the method the setFillColor(). Enter as its parameter java.awt.Color.RED (remember to use the specified capitalization). Right click on wall again and choose the method setFilled(). Enter as its argument true. STOP!!! MAKE SURE YOU FOLLOW THE NEXT STEP VERY CAREFULLY!!! Now you are on your own. The goal is to create a simple image of a house with a sun in the sky. For the next checkpoint, we want to see a written list of the exact steps you used to create the image. Take out a clean sheet of paper and make three columns. Here is a model, with its first line filled in: Object Method Arguments wall GRect Constructor 100, 200, 200, 200 Write down exactly what you do at each step. Include: Which object did you manipulate? Which method did you call? What argument(s) (if any) did you pass to the method? You must have the list to be checked off at the next checkpoint. NOTE: You can \"erase\" things you place in the drawing window. If you don't want to use an object that you placed in the picture: Right-click on the picture object on the Object Bench and choose the remove() method. Type the name of your object as the method argument. You can now delete the object from the Object Bench. It's okay if you have a misplaced line or two in the drawing you show us at the checkpoint. A sample of what the scene might look like is shown below, but do not feel bound by your instructor's efforts. Create your own scene. 1 Show us your scene and written list of method calls. Program Method Calls Now you'll recreate the same image by writing your steps in a Java program. Close the PictureDemo project and open the PictureProgram project. Compile the Picture class. Right-click on the Picture class and run its main() method. The program runs and places a red wall in the figure. Unfortunately, that is all it does. There is no door, window, roof or sun - yet! Your mission, should you decide to accept it, is to finish the drawing. Open the Picture class in the editor window. Look at the code in the main() method. It begins with two lines that create the window. The wall is then added to the picture. It is declared in the line that says: GRect wall; It is then instantiated on the line that says: wall = new GRect(100, 200, 200, 200); Finally, several method calls are made. Notice that within this program, we are able to specify color with simply the capitalized color name. Check online documentation for the java.awt.Color class to discover all allowed colors. Modify this code. Use the same method calls you used when making the interactive picture to create the same picture from within the main program. Hints: Follow the code that is already there. Method calls always look like: object.method(arguments); Try compiling and running your code frequently. It is better to catch your errors early than to be overwhelmed after typing many lines. To run this program, DO NOT construct a picture object. Run the main() method in the Picture class. Don't hesitate to refer back to the ACM graphics documentation in Firefox. 2 Show us the image you created. Adding Methods to the Point Class Close the PictureProgram project. Open the PointIn2D project. Review the Pointless class in the editor window. As you can see, this class's main() method reads in two (x,y) pairs and finds and prints the distance between them. Our goal for the rest of this lab is to create a program that produces the same results as this main() method in a different way: by using an instantiable class that represents points. We will (hopefully) see the benefits of using classes and methods when we see a final program that is shorter and more elegant than that one. This project contains three other classes (2 unfinished): The Point class contains data and methods to represent 2D points. This class is described in the prelab reading. The Pointedly class contains a program that uses the Point class to produce the same output as the Pointless program. The Triangle class contains a program to find the perimeter of a triangle. We will begin by working with the Point class. Open it in the editor. The Point class is designed to contain data and methods frequently needed by programs using points (like the Pointless program). Now comes the fun part. :^) We want to add new methods to the class. Constructor The default (i.e., no parameter) constructor is already in the class. It sets both the x-coordinate and y-coordinate instance variables to zero. Write a second constructor which takes 2 parameters, the first holding the value to be saved in xCoord and the second holding the value to be saved in yCoord. Accessor The getX() method is called an accessor. Its purpose is to allow a programmer to find out a value held privately within the data stored in the object. Our point class does not have a getY() method, but the class contains comments indicating where the code for this method belongs. Write getY(). Mutator The setX() method is called a mutator. Its purpose is to allow a programmer to change a value held privately within the data stored in the object. Our point class does not have a setY() method, but the class contains comments indicating where the code for this method belongs. Write setY(). The readFromKeyBoard() method This method appears in the class as a stub. A method written as a stub will compile, but doesn't do anything useful. One of the operations that we will repeatedly want to do with points is enter them from the keyboard. This method should create and use a Scanner object to read in the values of xCoord and yCoord respectively. Refer back to the similar code found in the Pointless class, if needed. Hint: Remember that in BlueJ, you can copy code from one class and paste it into another. The distanceTo(double px, double py) method The distanceTo() method needs to take two double parameters, named px and py, and returns our point's distance to that point. The code is similar to (but not identical to) the distanceToOrigin() method. You and your partner should now write this method from scratch. Test each of the five methods you have just written by creating objects of type Point and calling the methods. When you are satisfied that the methods are running correctly, call us over. 3 Be prepared to answer the following questions: Will there be any difference between a Point created by the default constructor, and one that is created by passing 2 zeroes as arguments to your new constructor? Why can't other classes access the values of xCoord and yCoord directly? How many different tests did you run for the distanceTo(double pX, double pY) method? Did you test for two points separated vertically? horizontally? with negative, positive, and 0 values for x and y? Experts Question: Our distanceTo method takes two doubles as parameters. Should it be possible to have a distanceTo method that takes a Point as a parameter? Close the Point class. Writing Client Code One of the primary reasons we write classes is so that we can use objects created from them in client programs. For this checkpoint you will look at two different clients that use the Point class. Open the Pointedly class. It contains a complete program that should run identically to the Pointless program. Look over the code, then try compiling and running it. Does it run correctly? If not, make changes in the Point class, not in Pointedly!! Is this program shorter and more elegant than the Pointless program? Hint: The correct answer is yes. Be prepared to tell your instructor or lab assistant why. Close the Pointedly class. Open the Triangle class. It contains a shell for a main program that declares three points and reads the first one from data supplied by the user. Complete the main program so that it reads in all three points from the user, calculates the perimeter of the triangle they represent and neatly outputs the three points and the perimeter to standard output. Hint: You can see how we have code that calls the readFromKeyboard() method. Use similar code and call the distanceTo() method. Do NOT retype or copy the distance formula into this class. Compile and run the program. 4 Be prepared to answer the following questions: Why do we need to place objectName. in front of the calls to run getX() and getY()? Will your program give a correct solution if the triangle is degenerate? (A degenerate triangle might have three colinear vertices, or two vertices that have the same x and y values.) Extras for Experts There is no check point or credit associated with this section. It is optional. It is meant to give some challenging exercises to those who finish early. There are at least four other methods that could be added to the Point class. The two simplest ones are setX(double xArg) and setY(double yArg). These can be used to change the x and y values of Points. Implement the setters. Points can also be represented in polar coordinates, (r, theta). r is the distance to the Origin. theta is the angle from the X axis to the ray from the Origin to the Point measured in a counter clockwise direction. theta = arcCos (x/r) assuming that y is positive. Implement getR() and getTheta() for the Point class. Do not add r and theta to the class as data members. Translate from x and y to r and theta in the methods. Here is an even more interesting project. Most likely, your Triangle class contains a main() method that in turn contains three Points and code to calculate the perimeter. Move the declarations for the three Points above the main method so that they are now instance variables in the class. Add a constructor to instantiate the three Point objects, and a method to calculate the perimeter. Rewrite the main program so that it declares a Triangle object and then calculates the perimeter. After the Lab Your next programming assignment will be posted soon. Remember to log out from Canvas (if you are still logged on) and close Firefox before you log out. 5 Show us that you have logged out, cleaned up, turned off your monitor and pushed in your chairs for this last checkpoint."
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_LiangLabs_Lab02_lab2.html.json",
    "body_content": "CSCI 241 Labs: Lab 2 CSCI 241 Labs: Lab 2 Write, Fix, Fix, Fix ... There are 5 checkpoints () in this lab, including the cleanup checkpoint. You and your partner should work together using just one of your accounts. So that one partner doesn't dominate the computer, CHANGE WHO IS IN CHARGE OF TYPING AT THE COMPUTER AFTER EACH CHECKPOINT! If you need help with any exercise, raise your hand. Getting Started Copy the directory Lab02 from /home/student/Classes/Cs241/Labs to your account. If you have forgotten how to do this, refer to the steps in Lab01. Change directories into Lab02 and start BlueJ by entering bluej&. Breaking Code on Purpose Open the project FixCode and look at the implementation of the class ComputeArea. This is the same program that is Listing 2.1 in your textbook. On the screen, however, BlueJ color-codes the program in its own way. Discuss with your partner what each color selection means. Even this early in the semester, you see code that contains many parts: reserved words, variables, operators, assignment statements and comments. It will help us reference parts of the program if we make line numbers visible. Follow these steps to do so: Click the main BlueJ window to make it active. Click Tools-Preferences You should now see the contents of the Editor tab. Click the check box next to Display Line Numbers. Click OK to close the window. When you return to the editor window for the program, line numbers should appear on the left of each line of code, including lines that are empty. This setting will now be in place every time you open BlueJ on your lab account. Compile and run this program to make sure it runs correctly. What does it print if the circle has radius 20? Take out a sheet of paper and write Forced Errors at the top. Make 3 columns, labelled: Line #, Change Made, Error Message Now's the time to have some fun! Good programmers are not only good detectives, but they are also very creative. For this checkpoint, you and your partner should brainstorm on the many ways that one could make a mistake when writing this program. We want you to make at least 10 different kinds of changes to the existing code just to see what happens. Make only one change at a time. For each error you create, record the related information in your table. Some changes that you try may not result in error messages, so you can write \"none\" in that column for that change. See if your change made a difference to the running of the program (if it compiled successfully, of course). If BlueJ detects more than one error from a single change, please record the first error message in the list. Some ideas for changes include: revising spacing mispelling reserved words mispelling a variable name removing a word, operator or other character adding a word, operator, comma or other character splitting a statement between lines of code changing capitalization changing bracket types Try to make as many different types of changes to the code as you can. (The more you learn from this checkpoint, the easier the following ones will be.) 1 Show us your written list of changes and errors. Which of your changes caused syntax errors? Which of your changes caused logic errors? Did any of your changes make no difference to the running program? What were the most unhelpful error messages? Close the ComputeArea class. Correcting Syntax Errors in Existing Code Before continuing, switch which partner controls the keyboard. Still within project FixCode, examine the implementation of the RightTriangle class. This program is supposed to prompt the user for the lengths of two sides of a right triangle, then it calculates the length of the hypotenuse and reports it. First, let's review the formula to calculate the length of a right triangle's hypotenuse: If a and b are the lengths of the two sides next to the right angle, we typically see the formula expressed this way: a2 + b2 = c2 So, the length of c is the square root of a2 + b2. In Java, we use a special built-in method to calculate square roots named Math.sqrt(double). For example, we can calculate the square root of 18.2 and save it in a variable named root with this line of code: double root = Math.sqrt(18.2); Unfortunately, your instructors were having brain cramps when they wrote this program. It is full of syntax errors. Your goal is to (1) find, (2) record and (3) remove all the errors. You may be able to identify some of the syntax errors without compiling the program. For today's lab, however, we want you record the error messages that Java's compiler produces for common syntax errors. You'll also record how you figured out how to fix them. Take out a sheet of paper and write Syntax Errors at the top. Make 3 columns, labeled: Line #, Error Message, Debugging Technique/Solution Compile the program as many times as necessary, recording the information in each column as you fix the errors that the compiler program detects. Recall that PreLab2 contains a list of some common debugging techniques. Think about what kind of data you can try to test if the program is working correctly. Is there an easy set of numbers you remember that make up the sides of a right triangle? (Hint: 3-4-5 is one example.) You can search the internet and find instant calculators for this, and try some of those numbers in your program. Your instructor found a calculator at this location: Hypotenuse Calculator Choose another set of numbers that you can use to check that your program is working correctly. 2 Show us your written list of syntax errors. Also, show your instructor or lab assistant that the RightTriangle program works and how you chose your test data. How many syntax errors did you find? Which were the trickiest to solve? Did any of these syntax errors match what you discovered in checkpoint #1? Close the RightTriangle class. Correcting Logic Errors in Existing Code Open the Statistics class. Compile it - no errors! But ... it is supposed to ask the user for 5 decimal numbers and calculate their sum and average. That's obviously not happening. Find room on paper for another list, this time keeping track of the logic (run-time) errors. Make 3 columns, this time labeled: Line #, Logic Error, Debugging Technique/Solution As you fix the errors in the program, try to follow the original style of coding. Record each error as you discover and fix it. Run the program and enter these numbers: 1, 2, 3, 4, 5 Their sum should be 15 and their average should be 3.0 - did it work? Run the program and enter these numbers: 2.3, 2.5, 1.4, 3.6, 4.4 Their sum should be 14.2, and their average should be 2.84. What do you see instead? 3 Show us your written list of logic errors. Also, show your instructor or lab assistant that the Statistics program works and how you chose your test data. Explain to us what was logically wrong with Statistics and how you corrected it. What kind of debugging technique(s) did you use to solve the logic problems? Do you think the above numbers tested this program completely? Are there types of numbers that this program couldn't handle? Close the Statistics class. Fix and Add More Before continuing, switch which partner is at the keyboard. Open the editor for the NumSquareCube class. This program also contains errors, but different ones that you had in the previous program (although not so many). Begin by correcting the errors in the existing code, recording the error messages and what they mean, just as you did previously. Once you have corrected the syntax and logic errors, you will see this output when you enter the number 2 at the keyboard: Number Square Cube------------------------------2 4 This is fine so far, but you can see that the last column has no value. Not only that, but we want the finished program to print 3 rows of numbers instead of 1. The second and third rows will have the same types of calculations for (first number + 1) and (first number + 2). For example, when complete (again, assuming that you enter a 2 at the keyboard), the program should print: Number Square Cube-------------------------------2 4 83 9 274 16 64 Your job is to finish the program so that it will print 3 complete rows of numbers (only one number will be entered at the keyboard). Don't worry about lining up the 1's columns; we learn how to do that soon. Keep track of any syntax and logic errors you see as you complete the program. 4 Show us your written lists of errors. Demonstrate the program to your instructor or lab assistant with different input values. Describe the types of errors you discovered with the original program. Close the NumSquareCube class. Close project FixCode. 5 Show us that you have logged out, cleaned up, pushed in your chairs and turned off your monitor for this last checkpoint. End of Lab"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_LiangLabs_Lab08_lab8.html.json",
    "body_content": "CSCI 241 Labs: Lab 8 CSCI 241 Labs: Lab 8 An Array of Problems There are 5 checkpoints , including the clean-up checkpoint, in this lab. You and your partner should work together using just one of your accounts. CHANGE WHO IS CONTROLLING THE COMPUTER AFTER EACH CHECKPOINT! If you need help with any exercise, raise your hand. Copy the lab materials to your account from /home/student/Classes/Cs241/Labs/Lab08 In this lab, you and your partner will write code to implement the linear regression calculations discussed in the prelab. Loading the Data Start running BlueJ and open project Lab08. Edit the Linear class. Linear's main() method is designed to hold one set of data for a linear regression. This includes its x-values, y-values and associated calculations. By the end of this lab, your Linear class will not only be able to calculate the values for linear regression, but also graph the associated function. When we create a Java class, we need to make two kinds of decisions: Implementation Decisions: Every time you write code, you make implementation decisions. For example, we give you the signature and return type (remember what that is?) of a method, and you write the code to fill in the body of that method. The combination of the signature and return type is called the method prototype. Design Decisions: These are the types of decisions made by a more seasoned programmer. The types of decisions include: what class(es) do I need to accomplish the goal of implementing a system? How should I break up the tasks into separate methods? What variables and constants do I need? Deciding on which classes to develop is an advanced topic that you usually see in upper-level computer science courses. We do know enough at this time to choose variables and methods. We start by deciding which values to save as variables in the main() method. The main() method is located at the bottom of the class. The prelab contains the needed formulas. We could decide to declare a variable for each of the variables in the formulas. Here is the first formula: y = mx + b It contains these variables: y m (the slope of the line) x b (the y-intercept of the line) Just inside the main() method, you will see declarations for two arrays of doubles (one to hold the x-values and one to hold the y-values): xArray[] and yArray[]. Decisions: When do we keep a value in a variable? If a value is calculated and used more than once, we keep it in a variable so we don't have to recalculate it. When do we rely on another static method to calculate a value for us? One good time to do this is when we have a complex formula, like that for the slope. The prelab contained this formula to calculate the slope (m): Sum(xi*yi) - n*xavg*yavgm = ------------------------ , Sum(xi2) - n*xavg2where n is the number of points in the data set. We'll save the slope (m) in a variable so we can draw a graph of the function later. To help figure out this formula, you'll write a method that sums the products of each x and y pair: Sum(xi*yi) This value doesn't need to be saved in a variable because we can call that method again at any time to recalculate it. However, it will save processing time to keep it in a variable, since we use it for r2 (correlation). Check the formula in the prelab and see where it is used. Here are your tasks for the first checkpoint: Add 3 new variables to the main() method to hold calculated values for: the slope (m), named m the intercept (b), named b the correlation squared (r2), named r2 Initialize each one to zero (0). We'll add the calculations later. Your code will read data from a file that contains real numbers. Note that there is already a variable declared named n. It will hold the number of points read in from the data file. Just past the declarations and initializations of variables in the main() method you will see some code to read the data points from a file. It is currently incomplete. Your instructors have included a bit of \"magical\" code from Chapter 12 of the text. It is the try ... catch block. This code catches some of the errors likely to occur when trying to read from a file, including errors like \"File not found\". This error can occur when a file name is mistyped. Our data input file contains several lines. The first line contains an integer which tells us how many lines of x and y values to expect in the lines of data that follow. Here is an example of how we can read from a file that is set up in this way. size has already been declared as an int, and myArray has been declared as an array of ints. Scanner file = new Scanner(new File(prefix + fileName));size = file.nextInt();myArray = new int [size];// while the file is not empty AND the array still has roomfor (int i = 0; file.hasNext() && i < myArray.length; i++){ myArray[i] = file.nextInt();} In this example, the data part of the file contained one integer per line. Your file is a little different. Go to a terminal window, and cd into your Lab08 directory. Type more lab08.dat To read from this data file, change the prefix variable to contain the path to your Lab08 directory. (Remember, you can type pwd at the command line to see your current directory location.) Complete the code between the try braces for this checkpoint. The comments tell you what to include. Because there are two numbers per line, you will need to call the Scanner's nextDouble() method twice to get both numbers. The main() method should also print the values held in each array after reading the data from the file. There is a method named printArrayContents at the beginning of the class. Complete this method, using a loop (or two) to print the data in the array that comes from the parameter. Once you have finished all these parts for the checkpoint, test your program by uncommenting the lines in the main() method which call it. 1 Show us your declared variables and the code you wrote to read the data from the file. Run your main() method so we can see the results. Be ready to answer: Why are the arrays for the x's and y's instantiated when we start reading data from the file, rather than at time of declaration? Methods to Calculate the Sums We will need 3 kinds of sums to do our calculations: sum of entries in an array, sum of the squares of the values in an array and sum of products of x and y values. Go back to the prelab and review the formulas for m, b and r2. The Linear class will contain 3 different methods to calculate these sums. Each of these methods will take either one or two arrays as parameters. Here is what each part means in the prelab formulas: Sum(xi) and Sum(yi) hold the sum of all the x-values and y-values, respectively. Once we get the values from these sums, we can easily calculate xavg and yavg. Sum(xi2) holds the sum of the squares of the x-values. We also see Sum(yi2), which holds the sum of the squares of the y-values. These are calculated using similar mechanisms, so the same method works for both. Sum(xi*yi) holds the sum of all the x*y values. Your next task is to write 3 different static methods to calculate and return these values. The method prototypes are: public static double sum(double [] array), public static double sumOfSquares(double [] array) and public static double sumOfProducts(double [] array1, double [] array2). Each method should return a double which holds the result of the sum. Because we want these methods to work for different arrays, make sure you send the correct array (or arrays) to the methods as arguments. To test your new methods, run them directly by right-clicking the Linear class in the BlueJ window. When the Method Call window pops up, you will need to provide arguments. When you need an array as an argument, you can type its content inside curly braces. For example, when running the the sum method, you can type {1,2,3,4} in the box before clicking Ok. Here are the answers you should expect from each of the methods by using the indicated arrays: sum() (using {1,2,3,4}): 10.0 sumOfSquares() (using {1,2,3,4}): 30.0 sumOfProducts() (using {1,2,3,4} and {5,6,7,8}): 70.0 2 Show us your code and output for the 3 summing methods. Time to Calculate! It's now time to put these pieces together and do the full calculations. Looking at the original formulas, you can see that both the slope and intercept formulas need to use the average of the x values and the average of the y values. That tells us that calculating both averages inside the main() method would save some processing time. Uncomment the lines that declare xAverage and yAverage, and finish their calculations by calling one of the methods you wrote for the last checkpoint. Is there more than one choice for a denominator? Earlier in the class, look for a method named findM(). This method performs the calculation needed for the slope. Examine its parameters. Uncomment the line inside that can now run, since you've written your methods. Now, add a call to this method from your main() method and save the value it returns in your own variable that holds the slope. Using the findM() method as a model, write 2 more methods: public static double findB(double avgX, double avgY, double slope) and public static double findRSquared(double [] xValues, double [] yValues) Each of these uses the corresponding formula in the prelab to calculate and return values for the intercept and correlation squared, respectively. When you are ready to try them out, add calls in your main() method and save the values in the variables you declared in checkpoint 1. After making these method calls, print the values that you have calculated. When you run main(), you should see these values: m = 0.09496242563609694 b = -0.3514937389023274 r2 = 0.9107185718154513 3 Show us your finished calculation methods and run main() so we can see your results. Plotting the Curve Back to reviewing the original equation: y = mx + b Since you have calculated values for m and b, we can use those values to plot the full set of points on a graph and draw the associated best-fit line through them. For this checkpoint, you will finish the plot() method. When working with graphics, we draw images based on pixel coordinates. These have the origin (0,0) in the upper left and each pixel to the right or down increments x or y by 1. This doesn't work out very well for our graphing. We want the origin in the lower left and we want to stretch or shrink our x and y values to fit into the window. To do this we include methods to translate our x's and y's to pixel values. public static int toPixelX(double x) takes a double representing the equation's x-value as a parameter and returns the equivalent pixel position. The pixel position was calculated using this formula: pixelX = 10 + x/4. public static int toPixelY(double y) takes a double representing the equation's y-value as a parameter and returns the equivalent pixel position. The pixel position was calculated using this formula: pixelY = 450 - 2y. toPixelX() and toPixelY() really depend on the data set. If the values in the arrays were different, these two methods would have to change. See Extras for Experts below, for example. public void plot() should draw the x- and y- axes, plot all points, and draw the best-fit line. This method is already stubbed in. Our class extends ACM library class named GraphicsProgram. While inheritance is an advanced concept, what it means is that the graphics \"stuff\", e.g. methods and colors, is already written. We just have to use them. Our method begins by calling this.start();. This opens the graphics window on the screen. It also contains commented code for drawing the axes. Uncommenting those lines will draw the axes. Uncomment the line in the main() method that calls plot. Run the main() method to make certain the axes appear. You might have to expand the lower part of your window to see the x-axis at the bottom. Plotting the points: The code in plot() contains special lines which draw GLines (lines) and GOvals (circles, in this case) in the plotting window. There is a partially complete for loop in the code which contains 3 lines in its body: the first 2 are currently commented out and incomplete. Those lines calculate the positions for the circles that will be plotted. The last line adds the circle to the plotting window. Complete the first 2 lines in the loop body that call toPixelX() and toPixelY() to determine where to place the circle. Also, make your loop go through the entire length of the arrays by completing the missing parts of the for control so that it does so. Draw the best-fit line: The last line in plot() draws a line in the plotting window that best fits the points. You will need to calculate the values for the variables which are currently commented out: You want to draw a line between x = 0 and x = 2000. Calculate each corresponding y value from the formula y = mx + b. Translate each x and y to its equivalent pixel position, and the last line of code will draw the line. 4 Show us the code for the methods, and run the program so we can see the graph. It should look like the figure given in your prelab. Don't forget to exit Firefox before you log out. 5 Show us that you have logged out, cleaned up, turned off your monitor and pushed in your chairs for this last checkpoint."
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_StringsStringBuilders.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/StringsStringBuilders Index of /Classes/Cs241/Examples/StringsStringBuilders NameLast modifiedSizeDescription Parent Directory - GuessOutput.java 2015-09-01 13:57 708 ReverseAStringBuilde..>2015-09-01 13:57 635 SBExamples.java 2015-09-01 13:57 1.2K StringBuilderLoopDel..>2015-09-01 13:57 1.2K StringLoops.java 2015-09-01 13:57 452 TestCharData.java 2015-09-01 13:57 1.0K TryConcatenation.java 2015-09-01 13:57 394 TryStringMethods.java 2015-09-01 13:57 1.2K"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_Loops_index.html?C=N;O=D.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/Loops Index of /Classes/Cs241/Examples/Loops NameLast modifiedSizeDescription Parent Directory - WhileFor.java 2015-09-01 13:57 1.2K WhileDoWhile.java 2015-09-01 13:57 2.2K Triangles.java 2015-09-01 13:57 696 Tables.java 2015-09-01 13:57 1.6K Stats.java 2015-09-01 13:57 1.6K RectangleOfStars.java 2015-09-01 13:57 928 NestedFor.java 2015-09-01 13:57 2.1K MultTable.java 2015-09-01 13:57 1.3K ForLoopMystery.java 2015-09-01 13:57 464 BasicWhile.java 2015-09-01 13:57 1.1K"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Downloads_index.html.json",
    "body_content": "UW-Parkside CSCI 241 Downloads CSCI 241: Computer Science I Software Downloads This page contains links and documentation for downloading software related to Computer Science I. Directions for installation of course files Use these installation instructions, whether you get files from your instructor or if you download files directly from the listed websites. BlueJ Download Website Choose the version of BlueJ for your computer's operating system. Java will come with it. Your operating system also determines where to save the MainRunner.jar file. Details can be found at the top of this web page: BlueJ Extensions. Right-click and save the Main Runner extension for BlueJ: MainRunner.jar ACM Library This library contains graphics code used in some labs and assignments. Right-click to download and save. DO NOT upzip this file. GlobalProtect VPN If you wish to reach the computer lab from off-campus, you must also install GlobalProtect VPN (Virtual Private Network) for an extra level of security. See separate document for details on installation and use. FileZilla Client Download Page The FileZilla software will allow you to securely copy folders and files to/from your home machine and Computer Science lab account. See separate document for details on installation and use. Web source for this document: http://www.cs.uwp.edu/Classes/Cs241/Downloads/index.html"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_StringsStringBuilders_index.html?C=M;O=A.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/StringsStringBuilders Index of /Classes/Cs241/Examples/StringsStringBuilders NameLast modifiedSizeDescription Parent Directory - GuessOutput.java 2015-09-01 13:57 708 ReverseAStringBuilde..>2015-09-01 13:57 635 SBExamples.java 2015-09-01 13:57 1.2K StringBuilderLoopDel..>2015-09-01 13:57 1.2K StringLoops.java 2015-09-01 13:57 452 TestCharData.java 2015-09-01 13:57 1.0K TryConcatenation.java 2015-09-01 13:57 394 TryStringMethods.java 2015-09-01 13:57 1.2K"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_BooleanIfElseSwitch_index.html?C=M;O=A.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/BooleanIfElseSwitch Index of /Classes/Cs241/Examples/BooleanIfElseSwitch NameLast modifiedSizeDescription Parent Directory - BooleanTests.java 2015-09-01 13:58 1.0K CompareDoubleValue.java2015-09-01 13:58 649 DanglingElse.java 2015-09-01 13:58 690 DemoPrintf.java 2015-09-01 13:58 436 DemoSwitch.java 2015-09-01 13:58 1.1K NestedIfs.java 2015-09-01 13:58 1.1K PrintBoolean.java 2015-09-01 13:58 2.2K"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_LiangLabs_index.html.json",
    "body_content": "CSCI 241 Labs CSCI 241: Lab Exercises NOTE!!! Read the prelab and lab carefully before the day the lab is scheduled. Here are directions for sharing lab files with your partner. Week Text Sections Pre-Lab Reading Lab Exercise 1 none Introduction to linux and Bluej Working in the Lab with BlueJ 2 Ch 2 Types of Errors Write, Fix, Fix, Fix, ... 3 Ch 2 Practice, Practice, Practice Write, Test, Write Some More 4 Ch 3 Pseudocode Think before You Leap 5 Ch 5.1-5.4, 5.6-5.7 The BlueJ Debugger Going Around in Circles 6 Ch 5 Going Loopy 7 Ch 4.2 and Ch 6 Online Java API Triangle Static Methods 8 Spring Break No Class or Lab Spring Break No Class or Lab 9 Ch 7 Linear Regression Regression Lab 10 Ch 8 The Game of Life Game of Life Lab 11 Ch 9 Getting the Point Using and Defining Objects 12 Ch 9 Concepts in Object-Oriented Design Where is My Variable? 13 Ch 4.4 and Ch 10.10 Bioinformatics A DNA Class 14 Ch 10 Encryption Algorithms I've Got a Secret"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/account_index.html.json",
    "body_content": "UW-P Computer Science: Account Management Computer Science Department Account Management Change CS passwordEnter your CS Username: Enter your CS Password: Computer Science Home"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_NumbersOperatorsCharacters_index.html?C=M;O=D.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/NumbersOperatorsCharacters Index of /Classes/Cs241/Examples/NumbersOperatorsCharacters NameLast modifiedSizeDescription Parent Directory - Typecasting.java 2015-09-01 13:57 603 TryUnicode.java 2015-09-01 13:57 422 TestInputDialog.java 2015-09-01 13:57 688 TestEscape.java 2015-09-01 13:57 862 Primitives.java 2015-09-01 13:57 1.2K PrePostIncr.java 2015-09-01 13:57 1.2K Numerics.java 2015-09-01 13:57 686 CharASCII.java 2015-09-01 13:57 949"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_2DArrays_index.html?C=S;O=D.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/2DArrays Index of /Classes/Cs241/Examples/2DArrays NameLast modifiedSizeDescription Parent Directory - MultiplicationTable...>2015-09-01 13:57 1.6K"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_InstantiableClasses_index.html?C=D;O=A.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/InstantiableClasses Index of /Classes/Cs241/Examples/InstantiableClasses NameLast modifiedSizeDescription Parent Directory - Circle.java 2015-09-01 13:57 1.6K Fraction.java 2015-09-01 13:57 3.1K FractionArrayTest.java 2015-09-01 13:57 1.6K TestCircle.java 2015-09-01 13:57 494 TestFraction.java 2015-09-01 13:57 936"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_LiangLabs_Lab11_lab11.html.json",
    "body_content": "CSCI 241 Labs: Lab 11 CSCI 241 Labs: Lab 11 Where is My Variable? Read all of these instructions before beginning the exercises. There are 6 checkpoints total in this lab. You and your partner should work together using just one of your accounts. Make sure each partner understands the exercises as you progress. If you need help with any exercise, raise your hand. Copy the Lab11 directory from the course directory to your account. It contains all the Java code you will need for this assignment. If you have forgotten how, refer to the materials for either Lab 1 or Lab 2. For the first exercises in this lab, you and your partner will need some paper and a pen or pencil. Class, Instance and Local Variables Work through the following two programs by hand with your partner and predict the output. Write down your predictions! Puzzle 1 public class Foo { private static int xx = 0; private int yy; public Foo () { xx = 2; yy = 3; } public Foo (int first, int second) { xx = first; yy = second; } public void init () { System.out.println( \"xx = \" + xx); System.out.println( \"yy = \" + yy); } public static void main ( String [] args ) { Foo foo1 = new Foo(); Foo foo2 = new Foo(7, 17); foo1.init(); foo2.init(); System.out.println( \"done\"); } } Puzzle 2 public class Strange { private int x; public Strange () { x = 34; } public int doSomething (int x) { System.out.println (\"Inside doSomething, x = \" + x); x = x + 1; System.out.println (\"After increment, x = \" + x); return x; } public int getStrangeValue () { return x; } public static void main ( String [] args ) { int x = 6; Strange s1 = new Strange(); Strange s2 = new Strange(); x = s1.doSomething(10); x = s2.doSomething(20); System.out.println(\"in main(), x = \" + x); System.out.println(\"s1 has value \" + s1.getStrangeValue()); System.out.println(\"s2 has value \" + s2.getStrangeValue()); } } Change directories into Lab11 and start BlueJ by entering bluej&. Open the project Puzzles, then compile and run the main() method in the Foo class. Was your prediction correct? Compile and run the main method in the Strange class. How was your prediction for that one? 1 Show us the output that you had predicted for each program. Be prepared to tell us if and where part of the code tricked you, and explain the output of the program. Close project Puzzles. Implementing and Testing the Class Constants and Methods Open the ThermometerProject. Examine the implementation of the Thermometer class to see what it currently contains. Create a new class in this same project, and call it Test. Within Test, write a class method main() that will print out the value of each public class constant that you see in the Thermometer class. Hint: BlueJ allows you to copy and paste lines from one class to another. Use this feature to help avoid mistakes from mistyping the long constant names! Back to the Thermometer class! Add two public class methods to translate fahrenheit-to-celsius and celsius-to-fahrenheit. Create the two methods: fahrenheitToCelsius() takes one double as a parameter which holds a number of degrees in the fahrenheit scale. It will calculate the equivalent celsius value and return it as a double. celsiusToFahrenheit(). takes one double as a parameter which holds a number of degrees in the celsius scale. It will calculate the equivalent fahrenheit value and return it as a double. take one double as a parameter and return a double. As you write your methods, make certain to use the constants defined in the class rather than \"hard code\" those values. Refer to the prelab for the appropriate formulas for the methods. Back in the Test class: add and run tests for these two methods. 2 Show us your finished program. Be prepared to answer the following questions: You didn't have to make an instance of the Thermometer class to print the constants. Why not? Show us how you implemented each of the two class methods and show us your test cases. Implementing the Constructors So far, all your coding has involved class variables and methods. Every thermometer has its own temperature though, right? Locate the declaration of the instance variable in the Thermometer class. Next, you'll write multiple constructors to set it. Write two constructors for the Thermometer class: The default constructor sets the initial temperature to 0.0 Celsius. The second constructor takes one parameter holding the initial temperature value (given in Celsius). The class already contains \"getters\" and \"setters\" for the instance variable. Complete the \"fahrenheit\" ones for the next checkpoint: getFahrenheit() should call a class method to help it do the conversion. setTemperatureUsingFahrenheit() should call a class method to help it do the conversion. Note: these methods are short! Any method you write whose body is more than four lines long is being done incorrectly. Your instructors have supplied a separate class to test these methods. Once you are done implementing the methods, compile and run the InstanceTest class. Carefully examine the output to make certain all the tests have passed. 3 Show us the output from the InstanceTest run. Be prepared to answer the following questions: Why are there only two constructors? In particular, why don't we implement a constructor that takes an initial Fahrenheit temperature? There is a way to call one constructor from another one, which is explained in Chapter 9. What would be a good reason why a programmer would call one constructor from another? Why did we make currentTemperature an instance variable rather than a class variable? Close the ThermometerProject project. Back to the Point Class In a previous lab (#10) we used an instantiable class named Point. For the next couple of checkpoints, you'll work with a new version of this class and add more features to it. Don't copy your old code! Open the PointIn2D project. This contains most of the completed code for all of the exercises we did in that lab. Your first job is to add a couple of methods to this class that we didn't get to the first time around: Complete the second version of the distanceTo() method, which has this signature: public double distanceTo(Point p2) This method should calculate and return the same information as the already-written version of the method. Write an equals()method to see if the current Point is the same as the one in the parameter. Here is its signature: public boolean equals(Point p2) This method should return true when the two Point objects have the same values in their instance data, otherwise false. To test these methods, create objects on BlueJ's object bench for 2 points. Name them \"p1\" and \"p2\" (rather than taking BlueJ's default names). Once objects have been created there, you can type p1 or p2 as parameter values whenever methods you wish to run require objects as parameters. Try it! 4 Show us the code you wrote for the above changes and how you tested your new methods. Answer these questions: How did you get the values of xCoord and yCoord for the parameter object in your new methods? Of the two distanceTo() methods in your program, which one better reflects data encapsulation? You wrote a method named equals() to see if two Point objects are the same. What is compared when we use == between two Point objects? Finding the Midpoint Another easy calculation to do with points is to find the midpoint between two points. Its formula is simple: if we have two points named p1 and p2: Add an instance method to your class named public Point findMidpoint(Point p2). It should calculate the midpoint between the current point and that of the parameter. It will create a Point with those values and return it. Draw state-of-memory diagrams to describe what is happening in this method. When finished, compile and run the TestPoint class main() method. Enter values you can calculate easily to test your results. You can see that there is already a class method written that tries to do this: public static void findMidpoint(Point,Point,Point), but it is commented out. Code to test it in the main() method is also commented out. That's because it doesn't work! Draw a state-of-memory diagram of what is going on in the method calls to help you figure things out. Uncomment the code in both classes related to this method and run it to see what the difference is between what you wrote and what the static method produces for results. Work with your partner to diagnose the problem and fix it so that it will work correctly. Note: Do NOT change the return type or the parameters, only make changes to the method body. 5 Show us the code you wrote, and answer these questions: When you create and return a Point object inside your findMidpoint() method, what is actually returned: the object itself (with all its contents), or the memory address of that object? What was the problem with the class method? Which seems to better model finding midpoints: the instance method or the class method? Extras for Experts Some modern thermometers keep track of maximum and minimum temperatures. Implement these in your thermometer class. It will require two extra data members, maximumTemp and minimumTemp, plus two additional \"getters\". You will not write new \"setters\", instead modify the ones you have. After the Lab Don't forget to exit Firefox before you log out. 6 Show us that you have logged out, turned off your monitor, cleaned up, and pushed in your chairs for this last checkpoint."
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_NumbersOperatorsCharacters_index.html?C=N;O=D.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/NumbersOperatorsCharacters Index of /Classes/Cs241/Examples/NumbersOperatorsCharacters NameLast modifiedSizeDescription Parent Directory - Typecasting.java 2015-09-01 13:57 603 TryUnicode.java 2015-09-01 13:57 422 TestInputDialog.java 2015-09-01 13:57 688 TestEscape.java 2015-09-01 13:57 862 Primitives.java 2015-09-01 13:57 1.2K PrePostIncr.java 2015-09-01 13:57 1.2K Numerics.java 2015-09-01 13:57 686 CharASCII.java 2015-09-01 13:57 949"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_LiangLabs_Lab08_prelab8.html.json",
    "body_content": "CSCI 241 Labs: PreLab 8 CSCI 241 Labs: PreLab 8 Linear Regression Linear Regression Linear regression is the process of taking a set of points and trying to fit a line through them. As you should recall from math class, two points determine a line. When there are more than two points, most likely they won't all fall on a perfect straight line, but they may be, and often are close. For any set of points there is one line that \"best\" fits the data. Finding the best fit line has many applications in science and business. For example, newspapers are full of stories about global warming. Scientists are collecting a huge amount of data. Linear regression analysis should help them understand how fast the earth is warming and what the average temperature will be at some future date. The form of the line is y = mx + b, where m is the slope of the line and b is the y intercept. The formula for m is: Sum(xi*yi) - n*xavg*yavgm = ------------------------ , Sum(xi2) - n*xavg2where n is the number of points in the data set. Since just one x and y specify just one point, we will use two arrays: one to hold the x-values and one to hold the y-values. The formula for b is: b = yavg - m*xavg Correlation Another basic question that scientists ask is: How good is the best fit line? This is measured using a statistic called correlation, or because it is slightly easier to calculate, the square of the correlation. The square of the correlation always lies between 0 and 1. A value close to 1 means the data is fairly linear. A value close to 0 means the data is scattered about randomly. Continuing with our global warming example, if a scientist comes up with the square of the correlation at 0.999, this means that she can predict very accurately how fast the earth is warming. If she comes up with a square of the correlation at only 0.256, the data doesn't accurately predict how fast the earth is warming. The formula for the square of the correlation is: (n*Sum(xi*yi) - Sum(xi) * Sum(yi))2r2 = ----------------------------------------------------- (n*Sum(xi2) - Sum(xi)2) * (n*Sum(yi2) - Sum(yi)2) An Example Walking through an example can help clarify the ideas and the calculations. Here is some actual data for a student who kept track of two values: X = the number of lines of code in their program, and Y = the number of hours it took to finish the program. n X Y X2 Y2 X*Y 1 186 15.0 34596 225.0 2790 2 699 69.9 488601 4886.01 48860.1 3 132 6.5 17424 42.25 858 4 272 22.4 73984 501.76 6092.8 5 291 28.4 84681 806.56 8264.4 6 331 65.9 109561 4342.81 21812.9 7 199 19.4 39601 376.36 3860.6 8 1890 198.7 3572100 39481.69 375543 9 788 38.8 620944 1505.44 30574.4 10 1601 138.2 2563201 19099.24 221258 Total 6389 603.2 7604693 71267.12 719914.4 The first three columns represent our data. The right three columns represent calculations we do on the data. Using the sums of X and Y we can quickly calculate the averages: n = 10Xavg = 6389/10 = 638.9Yavg = 603.2/10 = 60.32 Using the sums in the table and the averages we can find all our statistics: 719914.4 - 10 * 638.9 * 60.32m = ----------------------------------- = 0.094962425 7604693 - 10 * 638.92b = 60.32 - 0.094962425 * 638.9 = -0.351493739 Our equation becomes: y = 0.095 x - 0.3515 This equation takes the number of lines of code as its input and predicts how long it will take this student to finish the program. For example, if the program is 200 lines long, then y = 0.095 * 200 - 0.3515 = 18.64 or 18.64 hours. The correlation squared is: (10*719,914.4 - 6389*603.2)2r2 = --------------------------------------------- = 0.9107 (10*7604693 - 63892)*(10*71267.12 - 603.22) r2 = 0.9107 tells us that the size of the program is a very good indicator of how long it will take the student to finish the project. If we graph the data points and the line, we see that the line goes right through the \"middle\" of the collection of points. Linear regression can be used for all sort of predictions. Businesses can predict their future profits or losses based on trend data. Students can predict how long it will take them to finish an assignment. Scientists can predict how fast the earth is warming. Universities can predict their future enrollments. etc. etc. Finally, many real world phenomena are do not follow linear trends. For example, the earth's population in recent history has been growing exponentially, not linearly. There are other mathematical modelling techniques available to help make these predictions. In reality, the math to match a exponential curve to data is very similar to what we have done here."
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/connect.html.json",
    "body_content": "University of Wisconsin\u2013Parkside: Computer Science Computer Science University of Wisconsin\u2013Parkside UW\u2013Parkside HOME 262-595-2314 CS Account Policy Lab Schedule Connecting to Lab - Password Reset UW-Parkside Pages UWP Home Computer Science Major Computer Science Department Department Webpages Computer Science I App Factory UWP CS Policy Connecting to the lab (Remotely) If you qualify, you will be given an account on cs.uwp.edu. Before using the account, you must agree to the terms of the Account Policy Form when you first login and do the initial setup of your account. For most people, this is done in the first lab of the 241 course. If for some reason you did not activate your account, contact the CS System Administrator for assistance. The resources in the Computer Science lab may be accessed remotely from OFF-Campus or on Campus by using either SSH or Remote Desktop. Connecting to the CS Lab from OFF-Campus (Global Protect) This is an additional step that must be performed first before connecting to the lab. Global Protect is a VPN client that will allow you to access resources behind the campus firewall. If you are on campus or in the dorms, you do not need to use Global Protect. If you have not done this already, in a browser go to the URL https://studentvpn.uwp.edu Enter your UW-Parkside credentials and download the appropriate installer. The default installation settings should be sufficient. If your operating system is Linux, contact the CTS helpdesk so that they may provide the appropriate application for your OS. Once installed, on Windows there will be a icon (globe) located in your taskbar or on MacOS an icon located in the Menu Bar. Select the appropriate icon and input the Portal Address studentvpn.uwp.edu and CONNECT. Use your UW-Parkside credentials and DUO to connect. You may DISCONNECT at any time when you no longer need remote resources. Using Remote Desktop to Connect Remote Desktop allows a user to connect to the CS lab and view the Desktop and applications as if you were physically on the machine. Windows provides Remote Desktop by default in their installation. If you are using MacOS you must download Microsoft Remote Desktop from the AppStore, it is free. Ensure you download the latest verison. Linux has various clients that you can install. Depending on your OS On Windows, open the application and input in the text box labeled Computer: the hostname lab.cs.uwp.edu. A new screen will prompt asking for your CS username and CS password. On MacOS, open the application and add a Saved Desktop by clicking the + \u2304 button and then the Desktop button. For the text box labeled PC name: input the hostname lab.cs.uwp.edu. All other defaults should not be changed. Press the blue Add button in the bottom right. A box labeled lab.cs.uwp.edu should be present in \u2304 Saved Desktops. Double click this and enter your CS username and CS password. Once you are connected, to log off properly, select the power button in the top right corner of your Linux session and select your CS username followed by Log Off. Using SSH to Connect Secure Shell (ssh) encrypts a terminal connection, including your password, so no data is transmitted in clear, readable text. The lab machines are not accessible from off campus using telent or ftp. This will grant you an interface to process commands in the form of lines of text. To use SSH you may either use PowerShell on Windows or the terminal on MacOS or Linux. To access the lab through PowerShell or the terminal type the command ssh <login>@lab.cs.uwp.edu where <login> is your CS login, not your UW-Parkside login. Supply your CS password when prompted. Once you are connected, to end your connection properly, simply type exit in the terminal. Additional assistance If you need additional assistance, contact the CS System Administrator for help. \u00a9 University of Wisconsin-Parkside \u2022 900 Wood Road \u2022 PO Box 2000 Kenosha, WI 53141-2000"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_Methods_index.html?C=M;O=A.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/Methods Index of /Classes/Cs241/Examples/Methods NameLast modifiedSizeDescription Parent Directory - MultiplicationTable...>2015-09-01 13:57 1.8K Temperature.java 2015-09-01 13:57 790 TestMax.java 2015-09-01 13:57 561"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_BasicArrays_index.html?C=M;O=D.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/BasicArrays Index of /Classes/Cs241/Examples/BasicArrays NameLast modifiedSizeDescription Parent Directory - TryArrayParam.java 2015-09-01 13:57 2.9K Stats.java 2015-09-01 13:57 1.8K ParameterPrint.java 2015-09-01 13:57 963 InstantiateFillPrint..>2015-09-01 13:57 869 CopyArrayExample.java 2015-09-01 13:57 942"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_LiangLabs_Lab14_lab14.html.json",
    "body_content": "CSCI 241 Labs: Lab 14 CSCI 241 Labs: Lab 14 I've Got A Secret There are 5 checkpoints , including the clean-up checkpoint, in this lab. You and your partner should work together using just one of your accounts. CHANGE WHO IS CONTROLLING THE COMPUTER AFTER EACH CHECKPOINT! If you need help with any exercise, raise your hand. Copy the lab materials to your account from /home/student/Classes/Cs241/Labs/Lab14 In this lab you will explore some of the encryption algorithms discussed in the prelab and use them in some demonstration programs. Decrypting Start running BlueJ, and open project Lab14. It contains numerous classes that implement (or partially implement) encryption algorithms. These are: SwapCipher - which swaps adjacent characters in a StringBuilder. CaesarCipher - which rotates the characters of a StringBuilder forward in the alphabet. VigenereCipher - which adds the letters of a keyword to the letters in a StringBuilder. SubstitutionCipher - which substitutes letters from a rearranged alphabet for those in a StringBuilder. It also contains the EncryptionDemo class which is currently set up to read a file one line at a time and encrypt it using a SwapCipher object. Our task for the first checkpoint is to encrypt and then decrypt a data file. Let's start by looking at the data file. Go to a terminal window and cd into the Lab14 directory. Then, type: more mcgee.dat This will list the data file to the screen. It is the introductory stanza to the finest poem ever written in the English language, The Cremation of Sam McGee (note: this is Dr. Hansen's personal opinion). Now return to BlueJ. Open the SwapCipher class and look it over. Make sure you understand how the encryption algorithm works, since there will be questions at the checkpoint regarding it. Close the SwapCipher class and open the EncryptionDemo class. Examine the code carefully. Do you see how it is processing the entire file? Change the path in the File declaration statement to point to the Lab14 directory in which you are working. Close the EncryptionDemo class. Compile and run the main() method from EncryptionDemo. Enter the file name: mcgee.dat You should see the encrypted version of mcgee.dat appear in the output window. Your instructors have also created a file that contains this output (the encrypted version of the file). It is named mcgee.swap. Unfortunately, the code to decrypt the file is incomplete. Open the class DecryptionDemo. It contains a shell of a main() method. Complete its main() method, imitating the code from EncryptionDemo, but modifying it so that mcgee.swap is opened and decrypted to the screen. Hint: The two main() methods are very similar. They differ only in that DecryptionDemo opens a different file and decrypts rather than encrypts. Call us over when you are finished. 1 Be prepared to answer the following questions: What is the role of the variable temp inside SwapCipher's encrypt() method? Is it necessary, or could it be eliminated? Why does SwapCipher's decrypt() method just call the encrypt() method? What does file.hasNextLine() stand for in the while loop in EncryptionDemo? What are the differences between the main() methods in EncryptionDemo and DecryptionDemo? Caesar Ciphers Caesar ciphers work by rotating characters a certain number of positions forward in the alphabet. As you saw in the prelab, a Caesar cipher which rotates by 3 positions would move all 'A's to 'D's, 'B's to 'E's, etc. One slightly tricky part is that when we reach 'X', three positions forward takes us past 'Z' and out of the alphabet. We can handle this situation by checking to see if we pass 'Z' and if so, rotating back to the beginning of the alphabet. (Logically, this means moving 3 characters forward and then 26 characters backwards. As you will see shortly, this is exactly what our code does.) We will simplify our work by assuming we only want to rotate uppercase alphabetic characters. Open the CaesarCipher class in the BlueJ editor. Examine the encrypt() method carefully. Check out the questions at the checkpoint for the type of things you should be noticing. Open the EncryptionDemo class. Modify it so that it encrypts using a CaesarCipher object initialized to rotate 12 characters forward. Hint: If you change more than one line of code, you are changing too many! Compile and run the main() method in EncryptionDemo, again using mcgee.dat as your input file. What appears in the output window should begin FTQ ODQYMFUAZ AR EMY YOSQQ NK DANQDF I. EQDHUOQ Modify DecryptionDemo so that it decrypts using a CaesarCipher object initialized with 12. The file you want to test it on is mcgee.rot12 Hint: Again the modifications are VERY simple. Change the filename and the line where the encryptor object is declared. Try running the program. Oooops! The decrypt() method in the CaesarCipher class is only a stub. Reopen the CaesarCipher class and complete the decrypt() method. Test it using the DecryptionDemo class. Hint: You must check to see that the rotated character hasn't moved backwards past 'A' and add 26 if it has. Call us over when you have it running correctly. 2 Be ready to answer the following questions: What type of encryption would we get if the number of characters rotated were 26? What would we have to modify in encrypt() to make it rotate both upper and lower case characters? How would both the encrypt() and decrypt() methods change if we were returning a String rather than modifying the parameter? Vigenere Ciphers Vigenere ciphers work by adding characters from a keyword to the plaintext. Each character gets moved forward in the alphabet by a different amount, based on the keyword. We have given you a complete working version of the VigenereCipher class. Modify the EncryptionDemo class to have it encrypt mcgee.dat using a Vigenere cipher with a keyword of \"DAGGER\". Hint: You will probably have to look at the VigenereCipher class in order to determine how to construct the Vigenere object. Compare the resulting output from mcgee.DAGGER to the file mcgee.dat. Except for the quotation marks, they should be identical. Use the more command as you did in checkpoint 1 to see the values stored in the file. Modify the DecryptionDemo class to have it decrypt the file mcgee.DAGGER. Okay, here is the tough part. If you understand how the Vigenere algorithm works, you should be able to figure out the keyword used to do the encryption by looking at two files which represent the original and the encrypted versions. Get out pencil and paper for these steps. Look at the plaintext file (mcgee.dat) and the ciphertext file (mcgee.xxx) by using the more command in your terminal window to examine each file individually. Use your understanding of the the algorithm to determine the keyword, tracing the differences between the two files on paper. When you think you have it, try decrypting mcgee.xxx using DecryptionDemo. Call us over when you have the correct answer. 3 Tell us what the keyword is and explain how you found it. Substitution Ciphers Substitution ciphers work by substituting one character for another character throughout the text. For example, 'A' might translate to 'S' and 'B' might translate to 'H'. The SubstitutionCipher class is instantiated with a String, exactly 26 characters long. The String contains the sequence of translation characters for each letter in the alphabet. In our example, the String would begin \"SH...\". To translate, we find the index of the plaintext character in the alphabet and take the character with the same index in the encryption string. To translate back, we look up the index of the ciphertext character in the encryption string and take the character with the same index in the alphabet. Open class SubstitutionCipher. Like in checkpoint 2, decrypt() is only a stub. Complete this method. Modify EncryptionDemo and DecryptionDemo to work with the SubstitutionCipher class. Try encrypting mcgee.dat. The file to try to decrypt is named mcgee.QWERTYUIOPASDFGHJKLZXCVBNM. This should give you a BIG hint as to what encryption string to use. 4 Show us your decryption method and the two demo programs, as well as the output from the decryption run. Extras for Experts Note that there is one class in the Lab14 project that we haven't touched. That is PermutationCipher. Permutation ciphers require the use of an array of integers. Since you have already studied arrays, see if you can figure out how it works! After the Lab 5 Show us that you have logged out, cleaned up, turned off your monitor and pushed in your chairs for this last checkpoint."
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_LiangLabs_Lab07_prelab7.html.json",
    "body_content": "CSCI 241 Labs: PreLab 7 CSCI 241 Labs: PreLab 7 On-Line Java Documentation Introduction The three most fundamental levels of abstraction that Java provides are classes, objects, and methods. Understanding these three abstractions is key to being a good Java programmer. The Java Development Kit provides us with literally thousands of classes to use. If we search the Internet, we can find millions of other classes that programmers have written. If we are to use any of these effectively, we need to know what they are meant to do and how to invoke their methods. Fortunately, Java has a standard way of supplying documentation that is readily accessible via a web browser. This document explains how to navigate and hopefully make sense of the documentation. For purposes of this document, we will concentrate on static (i.e., class-level) information. Online Documentation Java Packages Java organizes classes into packages. A package is simply a collection of related classes and maybe some sub-packages. If our program is going to use one class from a package, there is a good chance that it will use others, so we generally import all the classes in a package at the same time by using the wild card (*) at the end of the package name. As you may remember, programmers use import statements in Java to refer to classes without using the full class names. Java documentation is also organized around the same package structure. Java 11 API Specification We can reach the general Java documentation from our course web page. The link on the course web page, Java Platform Standard Edition & Java Development Kit version 11 API Specification takes you to the source of Java's documentation. Here you will find information about all the classes available for you to use in your own programs. This document is the API (Application Programming Interface) specification for the Java Platform, Standard Edition, version 11.0, which is the version of the language that we are using. It is sometimes referred to as \"version 1.11\" as well. When you open this link to the API documentation, it looks like: The window you see begins with a summary describing the categories of modules available. Once you choose a module from the table, you see an alphabetical list of packages within that module. You also see other things listed in that window such as Interfaces, Enums and Exceptions. These are topics we cover in CSCI-242. The java.base module The list of modules includes java.base, which contains the fundamental building blocks of the language. That is where to start! The java.lang package The most frequent classes we use are located in the java.lang package. Chapter 4 of your textbook introduces you to many of the methods available in Java's Math class, located in this package. Here the beginning of its page: Here is a screen shot of some of the classes included: If you click the Math class, its documentation appears in the window: After an initial descriptive area, you see the constants and methods the class contains. You will see the method signature as well as the return type, as shown here: The Math class contains many more methods than are shown in this snapshot. Once you click a method, the display will jump to show you more details about that method, including its parameters and return value. For example, when you click the sqrt method, you will see: NaN means not a number, which is the type of value you would get if you try to take the square root of a negative number. Documenting Other Classes Using javadoc-style comments, it is possible to document any Java packages you write. In chapter 9, we will learn how to recognize and use other parts of the documentation for other types of classes; ones from which we instantiate objects."
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_StringsStringBuilders_index.html?C=N;O=A.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/StringsStringBuilders Index of /Classes/Cs241/Examples/StringsStringBuilders NameLast modifiedSizeDescription Parent Directory - GuessOutput.java 2015-09-01 13:57 708 ReverseAStringBuilde..>2015-09-01 13:57 635 SBExamples.java 2015-09-01 13:57 1.2K StringBuilderLoopDel..>2015-09-01 13:57 1.2K StringLoops.java 2015-09-01 13:57 452 TestCharData.java 2015-09-01 13:57 1.0K TryConcatenation.java 2015-09-01 13:57 394 TryStringMethods.java 2015-09-01 13:57 1.2K"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_Loops_index.html?C=M;O=D.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/Loops Index of /Classes/Cs241/Examples/Loops NameLast modifiedSizeDescription Parent Directory - WhileFor.java 2015-09-01 13:57 1.2K WhileDoWhile.java 2015-09-01 13:57 2.2K Triangles.java 2015-09-01 13:57 696 Tables.java 2015-09-01 13:57 1.6K Stats.java 2015-09-01 13:57 1.6K RectangleOfStars.java 2015-09-01 13:57 928 NestedFor.java 2015-09-01 13:57 2.1K MultTable.java 2015-09-01 13:57 1.3K ForLoopMystery.java 2015-09-01 13:57 464 BasicWhile.java 2015-09-01 13:57 1.1K"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_BooleanIfElseSwitch_index.html?C=N;O=A.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/BooleanIfElseSwitch Index of /Classes/Cs241/Examples/BooleanIfElseSwitch NameLast modifiedSizeDescription Parent Directory - BooleanTests.java 2015-09-01 13:58 1.0K CompareDoubleValue.java2015-09-01 13:58 649 DanglingElse.java 2015-09-01 13:58 690 DemoPrintf.java 2015-09-01 13:58 436 DemoSwitch.java 2015-09-01 13:58 1.1K NestedIfs.java 2015-09-01 13:58 1.1K PrintBoolean.java 2015-09-01 13:58 2.2K"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_LiangLabs_Lab09_prelab9.html.json",
    "body_content": "CSCI 241 Labs: Prelab 9 CSCI 241 Labs: Prelab 9 The Game of Life The Game of Life was invented by the mathematician John H. Conway to simulate the birth and death of cells in a society. The society exists on a rectangular grid (or board) of locations, which can be implemented as a 2-dimensional array. The Game of Life generates an animation. The board changes over time as cells are born and die. This 'game' was at one time very popular as a screen saver because of the interesting patterns it generates. It also is of some theoretical interest in the theory of computation. Below is a screen capture of a Game of Life screensaver. The board evolves over a series of generations. The previous generation determines which cells are alive in this generation. Likewise, this generation determines which cells will be alive in the next generation. Cells come to life and die off according to certain rules. The following rules govern birth and death of these cells between two generations of the society. At time T: A cell is born if there was none at time T-1, and exactly 3 of its neighbors were alive. An existing cell remains alive if at time T-1 there were either 2 or 3 live neighbors. A cell will die from isolation if at time T-1 there were fewer than 2 live neighbors. A cell will die from overcrowding if at time T-1 there were more than 3 live neighbors. A neighborhood consists of the 8 elements around any other element (i.e. the cells found immediately in each of the 8 directions (north, northwest, west, etc.) from the element). For example, cell[5][6] has these neighbors: cell[4][5], cell[4][6], cell[4][7], cell[5][5], cell[5][7], cell[6][5], cell[6][6] and cell [6][7]. The edge of the board presents special problems, since there are not 8 neighbors. The two choices are to handle the edge are to either Assume a border of dead cells all the way around the board, or Wrap to the opposite edge of the board. We will use the second alternative. Thus, cell [0][6] will have some of its neighbors in the bottom row (ROWS-1). Similarly, cell[5][COLS-1] will some of its neighbors in column 0. The figures below represent a sequence of generations. Its initial configuration contains 5 live cells in a column. It stabilizes and starts repeating generations 7 and 8 over and over. 1 2 3 4 5 6 7 8 Try to work through these generations by hand, seeing how the rules produce each image. Assume the first generation includes cells in array positions: [2][4], [3][4], [4][4], [5][4] and [6][4]. The interesting part of this 'game' is that certain groups of patterns behave very differently. Some patterns change and then stabilize by repeating themselves as in the example above. Some patterns quickly evolve into extinction. Other patterns continue to exist but move across the board. Complex behaviors can be illustrated by combining these patterns together. Your results depend on both the starting arrangement of cells and the variations of rules you use to determine the changes."
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_StringsStringBuilders_index.html?C=D;O=A.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/StringsStringBuilders Index of /Classes/Cs241/Examples/StringsStringBuilders NameLast modifiedSizeDescription Parent Directory - GuessOutput.java 2015-09-01 13:57 708 ReverseAStringBuilde..>2015-09-01 13:57 635 SBExamples.java 2015-09-01 13:57 1.2K StringBuilderLoopDel..>2015-09-01 13:57 1.2K StringLoops.java 2015-09-01 13:57 452 TestCharData.java 2015-09-01 13:57 1.0K TryConcatenation.java 2015-09-01 13:57 394 TryStringMethods.java 2015-09-01 13:57 1.2K"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_LiangLabs_Lab12_lab12.html.json",
    "body_content": "CSCI 241 Labs: Lab 12 CSCI 241 Labs: Lab 12 A DNA Class There are 5 checkpoints , including the clean-up checkpoint, in this lab. You and your partner should work together using just one of your accounts. CHANGE WHO IS CONTROLLING THE COMPUTER AFTER EACH CHECKPOINT! Make sure that each partner understands all steps in the lab. If you need help with any exercise, raise your hand. Copy the lab materials to your account from /home/student/Classes/Cs241/Labs/Lab12 Change directories into Lab12 and start running BlueJ. A DNA Class In this lab, you and your partner will develop a class to model strands of DNA. You will finish and create various methods that are useful in such a class. Keep your prelab reading handy; you may need to refer to it to complete some of the exercises. Open the Bioinformatics project inside of the Lab12 directory. This project already contains a shell (partially-written) class named DNA that represents DNA objects. You can compile it and create DNA objects on the object bar without making any changes to the class. Go ahead and try it! (Remember that when you run the constructor and enter a String, BlueJ requires that you surround that String with double quote marks.) The class contains only one data member: a String named sequence. This String contains the characters representing the nucleotides in the DNA. The class contains one constructor which takes a single String parameter representing the nucleotides needed to initialize the DNA object. The constructor is currently just a stub. Confer with your partner and write the following code inside the constructor to complete it: Convert the constructor's parameter to uppercase and assign the result to sequence. Validate that the letters in sequence are all valid nucleotides. There is another method called validate(), also currently a stub, located just below the constructor. Validation of input is typically done in a separate method like this. validate() is a private method. Complete that method, and call validate() in the last line of the constructor. There are two different (but equally correct) approaches to validating the DNA sequence. Add a for loop to walk through sequence one character at a time. If the character is not 'A', 'C', 'G' or 'T', validate() should print an error message to System.out. Continue the loop until all invalid characters are found and printed. or Use pattern matching to make certain that the sequence contains 1 or more instances of 'A', 'C', 'G' or 'T' and no other characters. Using this approach reduces the code to only a couple of lines of code. Complete the DNA class constructor and validate() method, and test them with both good and bad data. 1 Show us your revised constructor, and how it runs. Be ready to answer the following questions: Why did we direct you to make sequence all upper case? Why is validate() private? Which approach did you use to validate the sequence? Why? toRNA One important step in creating proteins is converting DNA to RNA. This requires replacing all the Ts in the sequence with Us. The String class has a method named replaceAll(). Use it to make the substitutions. The method should return the new String. The toRNA() method is already in the class as a stub. Complete the toRNA() method and test it thoroughly. 2 Show us your revised toRNA() method, and your tests. Be ready to answer the following questions: Why don't we need to write a special validate() method for the RNA sequence? Would it be a better idea to create an RNA class and have this method return an RNA object, rather than a String? Reverse Complement As discussed in the prelab reading, DNA comes in two strands. Given one strand of DNA it is possible to completely recreate the other strand. This is done by swapping As with Ts and Cs with Gs and then putting the sequence in reverse order. This means, for example, that each original T will be replaced with an A AND each original A will be replaced with a T. Work with your partner to create pseudocode for such a method. Decide whether you want to do everything in one loop, or as two separate, sequential loops. Then, add a new method reverseComplement() to your DNA class. It should take no parameters and return a String object that contains the reverse complement of sequence. Thoroughly test your method. 3 Show us your reverseComplement() method, and your tests. Be ready to answer the following questions: Did you decide to use any loops? Why or why not? Could you use a switch statement to do the character substitutions? Why or why not? Why is it important to be able to generate the reverse complement of a sequence? (Hint: Refer to your prelab reading.) Making Real World DNA Objects The second class in the Bioinformatics project is named Demo. It contains a main method that reads DNA sequence data from a file and creates a DNA object. This data is from a blue whale. Complete the main method by adding lines to do the following: Print the sequence of the DNA to System.out. Print the corresponding RNA sequence. Print the reverse complement of this sequence. 4 Show us your main() method. Be ready to answer the following questions: About how many characters are in the sequence? This is still just a tiny fragment of DNA. In larger data sets there may be hundreds of thousands or millions of nucleotides in the sequence. What additional methods would you add to your DNA class to help make this data easier to interpret? After the Lab Remember to exit Firefox before you log out. 5 Show us that you have logged out, turned off your monitor, cleaned up, and pushed in your chairs for this last checkpoint."
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_BooleanIfElseSwitch_index.html?C=D;O=A.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/BooleanIfElseSwitch Index of /Classes/Cs241/Examples/BooleanIfElseSwitch NameLast modifiedSizeDescription Parent Directory - BooleanTests.java 2015-09-01 13:58 1.0K CompareDoubleValue.java2015-09-01 13:58 649 DanglingElse.java 2015-09-01 13:58 690 DemoPrintf.java 2015-09-01 13:58 436 DemoSwitch.java 2015-09-01 13:58 1.1K NestedIfs.java 2015-09-01 13:58 1.1K PrintBoolean.java 2015-09-01 13:58 2.2K"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_LiangLabs_Sharing.html.json",
    "body_content": "CSCI 241 Sharing Labs CSCI 241 Sharing Lab Files Sending Labs to Your Partner's Account During lab each week, you will be working with a partner, and programs you create during lab time will be saved in only one of the two accounts. At the end of lab, the other person may also want to have a copy of these program files. Because account access is protected, you cannot directly copy files from one student's account to another's. For the following instructions, the student currently logged in will be referred to as \"Student1\", and the student who will receive a copy of the files will be referred to as \"Student2\". We will assume you want to copy all the files in the Lab01 directory. So that only one file need be transferred, the first part of these instructions explain how to create a zip file: Student1: Make certain you are in the directory that contains the Lab01 directory. You may need to cd to the proper level (to go up one level, type cd ..). Enter one of these commands: zip -r Lab01.zip Lab01 OR zip -r Lab01.zipp Lab01 This creates a zip (compressed) file containing all of the Lab01 directory contents, including any subdirectories that might exist. For security reasons, our campus email does not allow .zip files to be attached to email messages. If you wish to use RangerMail, you should name your file with the slightly different file extension (zipp). You'll rename it later. Here are two sets of instructions (you can use either one) to transfer this zipped file to Student2. The first way is by attaching the file to an email message, and the second way is by using secure file transfer protocol (sftp). The following instructions use RangerMail as the email client (program). This method of file transfer is handy if Student2 wishes to get a copy of the lab files on their home computer. It is also a good way to send files to yourself to retrieve at home. Using Firefox, go to the UWP Logins page and log into RangerMail. Enter your partner's email address in the To box. Type \"Lab01 Files\" in the Subject box. Look for the attachments box under the message box. Choose Browse and select the Lab01.zipp file. Important! You must also click the Update button. Click on the Send Message button. Log out of RangerMail. To receive the lab files, Student2 should follow the procedure below: Log in to any lab machine. Using Firefox, go to the UWP Logins page and log into RangerMail. Select the message containing the attachment. On the Parts line you should see Lab01.zipp. Click on it. A window will appear asking if you want to save the file. Make certain \"Save to Disk\" is selected, then either save to your desktop (the default) or click on the Desktop button to navigate to the location where you wish to save the file. Rename the \".zipp\" file as \".zip\". Log out of RangerMail and close Firefox. The two students can also use secure file transfer protocol to transfer the zipped file directly into another lab account. Assume that the two lab partners are working on the machine named radish. Student1 types the following command on his/her machine: sftp student2@radish.cs.uwp.edu note: this assumes student2 is the person's login name A prompt will appear asking for Student2's password. Student2 should type this in, then press Enter. The terminal window doesn't look quite the same as a normal terminal window, but Student2 can still use Linux commands such as cd, ls, etc. to go to the location where she wants the copied file to be placed. Student2 then types put Lab01.zip The zipped file will then be placed in the proper location. Student2 is still logged in to her account at this time. Student2 should type exit to stop running sftp and return the machine to Student1's account. Student2 should log in as usual to her account, then: In a terminal window, cd to the directory where you saved the Lab01.zip file. Type the command unzip Lab01.zip to unzip the file."
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_2DArrays_index.html?C=M;O=A.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/2DArrays Index of /Classes/Cs241/Examples/2DArrays NameLast modifiedSizeDescription Parent Directory - MultiplicationTable...>2015-09-01 13:57 1.6K"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_Loops_index.html?C=S;O=A.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/Loops Index of /Classes/Cs241/Examples/Loops NameLast modifiedSizeDescription Parent Directory - ForLoopMystery.java 2015-09-01 13:57 464 Triangles.java 2015-09-01 13:57 696 RectangleOfStars.java 2015-09-01 13:57 928 BasicWhile.java 2015-09-01 13:57 1.1K WhileFor.java 2015-09-01 13:57 1.2K MultTable.java 2015-09-01 13:57 1.3K Tables.java 2015-09-01 13:57 1.6K Stats.java 2015-09-01 13:57 1.6K NestedFor.java 2015-09-01 13:57 2.1K WhileDoWhile.java 2015-09-01 13:57 2.2K"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_InstantiableClasses.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/InstantiableClasses Index of /Classes/Cs241/Examples/InstantiableClasses NameLast modifiedSizeDescription Parent Directory - Circle.java 2015-09-01 13:57 1.6K Fraction.java 2015-09-01 13:57 3.1K FractionArrayTest.java 2015-09-01 13:57 1.6K TestCircle.java 2015-09-01 13:57 494 TestFraction.java 2015-09-01 13:57 936"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_2DArrays.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/2DArrays Index of /Classes/Cs241/Examples/2DArrays NameLast modifiedSizeDescription Parent Directory - MultiplicationTable...>2015-09-01 13:57 1.6K"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Downloads_howToInstall.html.json",
    "body_content": "UW-Parkside CSCI 241 Custom Installation CSCI 241: Computer Science I Software Installation This page contains instructions about how and where to install files and documentation related to Computer Science I. You may either get the files from your instructor copied onto a USB drive or download them yourself. Preparing Your Hard Disk The instructions that follow assume that you are installing everything on a PC with some version of the Windows operating system. If you wish to install your system on a Linux machine, you will need to download different versions of the Java JDK and BlueJ. Ask your instructor for Linux-specific instructions if you need them. In either case, make sure you install these files in the order specified below. Most files can be installed by simply double-clicking them. The zip files are compressed files which were made using a 'zip' utility, and for our use, you are not required to unpack these files. In fact, you SHOULD NOT unzip the acm.zip file; it will not work properly with BlueJ. Install BlueJ In CSCI-241 we will be using BlueJ to write, edit, compile and run programs. When you download BlueJ, you will also get the correct version of Java with it (version 11.0). BlueJ is designed for student use and its installation is very easy. You will want the file named bluej-502.msi, which holds the setup for version 5.0.2 of BlueJ, available in August 2021. Much more information about BlueJ is available on the website (www.bluej.org). To begin the installation, double-click the file. When the window entitled \"Open File - Security Warning\" appears, choose to Run the program. Most of the windows that appear are self-explanatory, but here they are in order: Welcome to the BlueJ Installer: choose Next on this (and most windows) to run the installation process. Select Destination Location: It first asks for a directory name where BlueJ will reside. Its default setting will make a directory called C:\\BlueJ, and this works well. Select Start Menu folder: This will place BlueJ in your Windows Start Menu list; the default location listed will be fine. Select Additional Tasks: You can decide whether you want a BlueJ icon on your desktop or not. The default will create one. Ready to Install: This installation should go much more quickly than installing Java. Click the Install button. Completing the BlueJ Setup Wizard: You may choose to view the README file or start BlueJ running at this time. After installing BlueJ, you'll add the special extension program named MainRunner.jar to it. All you need to do for this step is to copy the file inside this folder: C:\\BlueJ\\lib\\extensions2\\ (for Windows). If you are using another operating system, this web page tells you where to save the file: BlueJ 5+ Extensions You may also wish to view the BlueJ tutorial. Download it onto your machine if you wish to have it available as you learn to use BlueJ. There are also videos available on YouTube. Install the ACM Graphics library ACM-SIGCSE (Association for Computing Machinery - Special Interest Group on Computer Science Education), an international organization, has developed a library including graphics that new-to-Java students can use in simple programs. We will use this graphics package in several lab exercises and possibly in a programming project this semester. One reason that software developers like Java is because it is easy to write programs which use code already written and tested by others. You will find both a file and folder related to this package in the collection: acm.zip (the collected byte code for the library) and acm.javadocs (a folder containing Java documentation for this code). Now start BlueJ by double clicking on the desktop icon. In rare cases, the first time you run BlueJ, it might ask you where it can find Java (it might also automatically detect it if you've installed it in the default location of C:\\Program Files\\Java\\jdk-11.0.6 - note that in this name, Java 11.0 is also referred to as \"Java 1.11\"). You can browse to this location and then click the Launch BlueJ button. We also need to tell BlueJ where to find the ACM library we just added. When you installed BlueJ, it created a folder named BlueJ under your C: drive. Copy the acm.zip file so that it goes into this location: C:\\Program Files\\BlueJ\\lib\\userlib\\acm.zip Notes: On your machine, it might not be in this exact location, but it was on my Windows 10 machine. If using a Mac, you'll need to Control-Click the BlueJ icon and choose Show Package Contents to reach the folders. BlueJ does NOT require you to unzip the library. In fact, it won't work if you do. BlueJ now knows it can look in that location for code you may refer to in your programs. To test your installation of acm.zip, start running BlueJ again. Create a new project, and create a new class in it named Doodle. Type in the program you saw at the end of Lab #1. If it compiles and runs successfully, BlueJ has found the ACM graphics library. Since you have started running BlueJ, check that MainRunner.jar installed correctly: In the top menu line, choose Help, then click Installed Extensions. You should see Main Program Runner in the \"Installed\" list. There are separate documents explaining how to install and use GlobalProtect VPN, FileZilla and Remote Desktop Connection. Please review them after you have installed BlueJ. That's it! Please let your instructor know how to improve these instructions. Web source for this document: http://www.cs.uwp.edu/Cs241/Classes/Downloads/howToInstall.html"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_NumbersOperatorsCharacters_index.html?C=D;O=D.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/NumbersOperatorsCharacters Index of /Classes/Cs241/Examples/NumbersOperatorsCharacters NameLast modifiedSizeDescription Parent Directory - Typecasting.java 2015-09-01 13:57 603 TryUnicode.java 2015-09-01 13:57 422 TestInputDialog.java 2015-09-01 13:57 688 TestEscape.java 2015-09-01 13:57 862 Primitives.java 2015-09-01 13:57 1.2K PrePostIncr.java 2015-09-01 13:57 1.2K Numerics.java 2015-09-01 13:57 686 CharASCII.java 2015-09-01 13:57 949"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_InstantiableClasses_index.html?C=N;O=A.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/InstantiableClasses Index of /Classes/Cs241/Examples/InstantiableClasses NameLast modifiedSizeDescription Parent Directory - Circle.java 2015-09-01 13:57 1.6K Fraction.java 2015-09-01 13:57 3.1K FractionArrayTest.java 2015-09-01 13:57 1.6K TestCircle.java 2015-09-01 13:57 494 TestFraction.java 2015-09-01 13:57 936"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_Methods_index.html?C=S;O=D.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/Methods Index of /Classes/Cs241/Examples/Methods NameLast modifiedSizeDescription Parent Directory - MultiplicationTable...>2015-09-01 13:57 1.8K Temperature.java 2015-09-01 13:57 790 TestMax.java 2015-09-01 13:57 561"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_BasicArrays_index.html?C=S;O=A.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/BasicArrays Index of /Classes/Cs241/Examples/BasicArrays NameLast modifiedSizeDescription Parent Directory - InstantiateFillPrint..>2015-09-01 13:57 869 CopyArrayExample.java 2015-09-01 13:57 942 ParameterPrint.java 2015-09-01 13:57 963 Stats.java 2015-09-01 13:57 1.8K TryArrayParam.java 2015-09-01 13:57 2.9K"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_StringsStringBuilders_index.html?C=S;O=D.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/StringsStringBuilders Index of /Classes/Cs241/Examples/StringsStringBuilders NameLast modifiedSizeDescription Parent Directory - TryStringMethods.java 2015-09-01 13:57 1.2K SBExamples.java 2015-09-01 13:57 1.2K StringBuilderLoopDel..>2015-09-01 13:57 1.2K TestCharData.java 2015-09-01 13:57 1.0K GuessOutput.java 2015-09-01 13:57 708 ReverseAStringBuilde..>2015-09-01 13:57 635 StringLoops.java 2015-09-01 13:57 452 TryConcatenation.java 2015-09-01 13:57 394"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_LiangLabs_Lab01_prelab1.html.json",
    "body_content": "CSCI 241 Labs: PreLab 1 CSCI 241 Labs: PreLab 1 Introduction to Linux and BlueJ Introduction The beginning of this document introduces you to procedures and commands for working in the UW-Parkside Computer Science Department lab; the end introduces BlueJ. The Linux command section contains all commands you will need this semester. Another (more extensive) handout, \"Getting Started in UNIX\", complements this document and is available in the lab. These handouts will be useful all semester, so keep them with you when you are working on lab machines. Activating your Computer Science (CS) Lab account The Computer Science Department has established policies that all lab users must follow. They are summarized in the account policy sheet. Make certain you read, understand and follow these policies. The very first time (and only the first time) you use a computer in the lab, you need to activate your account. Your Computer Science (CS) Lab account will have a DIFFERENT login ID and password than the one you use for other UWP access. Preparation Have the following information ready before you start: Your UWP login ID (the one you use for SOLAR, RangerMail, etc.) Your UWP password Your choice for a LAB account password. Lab passwords must contain between 8 and 255 characters and have at least 2 characters that are not letters, and at least one character that is not alphanumeric (not a letter or digit). Also, it cannot contain any common English words or match your UWP password. Please wait at your machine while each student activates his/her account individually. Once activated, the system will need a few minutes to process the activation. The system will assign a login name to you. This might / might not match your last name. Remember your LAB login name and your LAB password. Logging In Your lab login id and password are associated with your lab account, not with one particular machine. Use them at any machine in the room. The computer system you use in the Computer Science Laboratory runs the Linux operating system. Linux is a variant of UNIX, and our lab currently uses CentOS linux. If the screen is blank, press any key to bring it to life. The monitor may be turned off; turn it on if necessary (our monitors will go to sleep after a short time with no computer use). PLEASE keep your fingers from touching the screens - they are not easily cleanable. You should now see a screen with the current date and time. Press the Enter key (or roll the mouse wheel). Now you should see a dialogue box where you can enter your \"Username:\". Enter your CS department login name and press Enter. Then, one more dialogue box appears asking for your password. Type your password in the box and then press the Enter key. If your login is successful, there will be a short delay (needed to load your profile) followed by the display of some startup Gnome windows (Gnome is your Desktop Manager Program.) Close any windows that show up by clicking on the X in the upper right corner of the window. Look in the upper left corner and click Applications. You can use this menu item to reach just about anything you need to use. In the Favorites list which appears, click Terminal. You will now see a window whose title includes your login, machine name (login-name@vegetable-name) and current directory location (~, which means your home directory, /home/student/login-name). The cursor should appear to the right of a prompt which looks like: \"[login-name@vegetable-name~]$\". Logging Out When you are finished working on a computer you must log out. For security reasons, we recommend you do NOT use the \"Switch User\" option. Failure to log out properly will potentially result in other students gaining access to your account. First, close all browsers and application programs currently running. Logging out while certain applications are running can leave them running even after you log out, tying up resources and leaving a potential security risk. Click on your name (found in the upper right corner of the screen). Select the option, \"Log out\". Another dialogue box will appear, from which you can confirm that you want to log out. DO NOT shut the machine down; others may be using it remotely. Working in X Windows and Linux The computer science lab machines run the Linux operating system, a variant of UNIX. X Windows runs on top of Linux, giving us windows and menus in which to work. A desktop manager named Gnome runs on top of the X Windows server. Various window managers also work in the background. Your account has already been set up to run a window manager. Linux Commands This section summarizes a few of the basics of working within Linux. Linux commands are typed into an xterm (a terminal window). To open an xterm you can click Applications-Favorites-Terminal (as described above). A window will open with a prompt that looks something like [smith@cabbage~]$ where smith is your login name and cabbage is the name of the machine at which you are working. Linux commands are case sensitive. Most commands are typed in all lower case, but make certain you type them exactly as they appear below. The Directory Structure Almost all operating systems use the basic notions of directories (folders) and files stored within the directories. Linux is no exception. When you login to your account, you are in your home directory. Your home directory has a parent directory, and as you will see, you can also create subdirectories within your home directory. All together the directories form a large (upside down) tree. The root of the tree is named: / When typing commands several directories have special abbreviations. The current directory is referred to as: . The parent of the current directory is: .. Your home directory is: ~ pwd prints the name of the working directory. At the $ prompt, enter: pwd. Assuming that your account is named 'smith' and that you have just logged in, the machine will respond with: /home/student/smith This may be interpreted as: / contains a subdirectory named home, home contains a subdirectory named student, and student contains a subdirectory named smith, which is your home directory. cd changes the working directory. cd (typed by itself) returns you to your home directory. cd .. moves you up one level in the directory tree. cd directory path - changes directory to location specified. ls lists the files and subdirectories within the current directory (that's a letter L in lowercase followed by s). ls lists the filenames. ls -l is a long listing (the letter after the - (dash) is also a lowercase L). It includes permissions on the files, the owner of each file, when they were created and their names. ls -a lists all files, including those beginning with . (files usually hidden from view; generally containing setup or configuration information). The current directory is always named . (by itself), but other files may begin with . as well. mkdir makes directories. mkdir Lab01 creates a subdirectory named Lab01 rmdir removes empty directories. rmdir Lab01 removes the directory named Lab01 File Manipulation Files exist within directories. They are typically created using an editor. There are many editors available in the CS lab, including gedit, vi and emacs. gedit is the most intuitive, with many of the same commands you use in Microsoft's WordPad. There are specialized handouts available in MOLN D120 to learn about vi and emacs. Once files exist, they can be copied, moved, deleted and viewed via various Linux commands. Linux uses the wild card character, *, to match any string of characters in a file name. Warning: Using an asterisk (*) can affect more files than you expect if unintended files match your wild card specification. cp is used to copy files. cp Ball.java Ball.bak copies the file Ball.java into a new file named Ball.bak At the beginning of each week's lab exercise, you will copy a directory of files. For example, here is the command for the first week: cp -r /home/student/Classes/Cs241/Labs/Lab01 . This command has several parts to it, including a \"from\" and a \"to\" location. Specifically, it copies the directory named Lab01 (and all folders and files it holds) from its location inside of /home/student/Classes/Cs241/Labs. The -r option (or \"flag\") says to do the copy recursively (meaning take the contents of the directory as well). It copies all of this group to the current directory (the location from which you typed the command, represented by the dot (.)). As a rule of thumb, when copying a directory, use the -r flag. When copying individual files, do not. more lists files to the window, one windowful at a time. more Ball.java lists the file Ball.java to the window. If the file is more than one window long, more waits for the user to press the spacebar for the next windowful. rm removes files. rm Ball.java removes the file Ball.java Warning! Use rm with caution. Once a file is removed, it is gone forever. For example, rm -rf * will remove all the files in the current directory. chmod changes the access permissions on files or directories. Security on UNIX systems is based on granting permissions to the file owner (u), the file's group (g) and all others (o). You are the owner of files you create. All students belong to a group named student. The permissions are read (r), write (w) and execute (x). Anyone with read permission may see the contents of the file. Anyone with write permission may change the file. For programs, anyone with execute permission may run the program. The permissions are a bit different for directories. In particular, execute permission on a directory enables one to access the contents of the directory. chmod g+x a.out adds execute permission to all members of the group to enable them to run the program a.out. chmod go-r Ball.java removes read permission from the file Ball.java, so that group members and others can no longer read it. Now ls -l discussed above makes more sense. ls -l /home/student/Classes/Cs241/Labs/Lab01 returns something like: -rw-r--r-- 1 hansen staff 123 Sep 7 2001 LabOne.ctxt-rw-r--r-- 1 hansen staff 788 Sep 7 2001 LabOne.java-rw-r--r-- 1 eddy staff 471 Sep 7 2001 README.TXT-rw-r--r-- 1 hansen staff 285 Sep 7 2001 bluej.pkg-rw-r--r-- 1 hansen staff 285 Sep 7 2001 bluej.pkh Most of the files belong to Professor Hansen, except for README.TXT which belongs to Ms. Eddy. The group of each file is staff. The first 10 characters of each line show the permissions on the file. The first character is a - for ordinary files and a d for directories. The next three characters show the owner's permissions, the next three the group's permissions and the last three all other's permissions. In our example, the owner has read and write permissions. The group and others have only read permissions. There are no executable files in this directory. Linux Printing Commands lp prints a copy of a file to the printer. lp LabOne.java prints the file LabOne.java to the printer. It prints one logical page per physical sheet of paper. To submit your assignments, you will NOT need to give a printout to your instructor. You will upload a copy of your .java file(s) to Canvas. However, if you wish to print for your own review, we recommend printing files through BlueJ. BlueJ also allows you to print 2 logical pages on one physical sheet of paper (used to save paper while work is in progress). Most applications (like BlueJ, mentioned earlier) have a print command in their menu system. This is generally the easiest way to print. Warning! Do not print binary files. In particular, do not print files with a .class extension. The results are unpredictable, including possibly printing hundreds of pages and/or hanging the printer. lpq displays the jobs currently waiting in the print queue. You can see if your file is still waiting to be printed. Most applications (like BlueJ, mentioned earlier) have a print command in their menu system. This is generally the easiest way to print. Submitting a Programming Assignment Electronically (two required ways) Each programming assignment (not labs) must be submitted in two ways: Submit your projects through a BlueJ menu option. You MUST be running BlueJ in our lab to do the submission; it does NOT work with your home computer BlueJ installation. This process copies your BlueJ project, and all its files, into a directory that your instructor uses for grading. Each submission is time-stamped so that we will know it has arrived on time. From here, your instructor can compile your program(s) as well as run it/them with test data. Upload each .java (source file) you create/modify to Canvas. Your instructor can write comments on this copy and assign points. If, after submitting a project, you discover that you want to change what you have submitted, you may simply submit through the menu option again. The earlier version(s) of your program(s) will be replaced by the new version(s). Using a USB Storage Device Many students use USB storage devices to transfer files between computers. These are also called flash memory or pen or jump drives. In our lab, these drives must be mounted and unmounted on the machines in order to access them underneath the root directory. To begin: Insert the USB device on the front of the computer underneath the table. After a brief delay, a window will appear listing the contents of this device. An icon for the device will also appear on your desktop. Stored files will be found inside a directory at: /media The name of the directory where the files are located depends on the brand name of your flash drive. For example, if the brand is Kingston, you might find the files at this location: /media/KINGSTON/* These files can be accessed with normal Linux commands like cd, ls, cp, etc. When finished, you will need to remove the device using these steps: Close any windows displaying the contents of the device. Right-click on the device's icon and choose Eject Volume. Unplug the device from the cable before logging out and turning off the monitor. Other Useful Linux Commands Although a Linux command exists to change your password, it is easier do so by opening a browser and navigating to: https://www.cs.uwp.edu/account/activate Follow the directions on the screen. who tells you who is currently logged onto the system. ps -u tells you the status of all your active processes (i.e., the programs that are running on the machine in front of you). Here is sample output from ps -u: USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMANDhansen 26902 0.0 0.1 1740 988 pts/8 S 13:00 0:00 -bashhansen 26963 0.1 1.0 8192 5296 pts/8 S 13:01 0:05 emacs -font 10x20hansen 28737 0.0 0.1 2324 688 pts/8 R 13:49 0:00 ps -u Professor Hansen has three processes running: a command shell (bash), an editor (emacs) and the ps command. The first two are stopped. The status of the last one is running. The PID (Process ID) column tells you the unique number assigned to each process. kill -9 PID kills processes. kill -9 26963 will kill the emacs session that Professor Hansen is running. Warning! Use kill judiciously. There is almost always a more natural way to terminate a program. Only use kill when a program is so hung there is no other alternative. Sending Labs to Your Partner's Account During lab each week, you will be working with a partner, and programs you create during lab time will be saved in only one of the two accounts. At the end of lab, the other person may also want to have a copy of these program files. Because account access is protected, you cannot directly copy files from one student's account to another's. For the following instructions, the student currently logged in will be referred to as \"Student1\", and the student who will receive a copy of the files will be referred to as \"Student2\". We will assume you want to copy all the files in the Lab01 directory. So that only one file need be transferred, the first part of these instructions explain how to create a zip file: Student1: Make certain you are in the directory that contains the Lab01 directory. You may need to cd to the proper level (to go up one level, type cd ..). Enter one of these commands: zip -r Lab01.zip Lab01 OR zip -r Lab01.zipp Lab01 This creates a zip (compressed) file containing all of the Lab01 directory contents, including any subdirectories that might exist. For security reasons, our campus email does not allow .zip files to be attached to email messages. If you wish to use RangerMail, you should name your file with the slightly different file extension (zipp). You'll rename it later. Here are two sets of instructions (you can use either one) to transfer this zipped file to Student2. The first way is by attaching the file to an email message, and the second way is by using secure file transfer protocol (sftp). The following instructions use the campus RangerMail program as the email client (program). Very similar directions apply if you use a different email server such as yahoo or hotmail. This method of file transfer is handy if Student2 wishes to get a copy of the lab files on their home computer. It is also a good way to send files to yourself to retrieve at home. Using Firefox, go to the UWP Logins page and log into RangerMail. Choose to send a new message. Enter your partner's email address in the To box. Type \"Lab01 Files\" in the Subject box. Look for the \"Attach files\" button (with the paper clip) above the \"From:\" field. Choose Browse and navigate to your Lab01.zipp file, and click Open. Important! You must click the Attach button. Click the Send button. Log out of RangerMail. To receive the lab files, Student2 should follow the procedure below: Log in to any lab machine. Using Firefox, go to the UWP Logins page and log into RangerMail. Select the message containing the attachment. On the Parts line you should see Lab01.zipp. Click on it. A window will appear asking if you want to save the file. Make certain \"Save to Disk\" is selected, then either save to your desktop (the default) or click on the Desktop button to navigate to the location where you wish to save the file. Rename the \".zipp\" file as \".zip\". Log out of RangerMail and close Firefox. The two students can also use secure file transfer protocol to transfer the zipped file directly into another lab account. Assume that the two lab partners are working on the machine named radish. Student1 types the following command on his/her machine: sftp student2@radish.cs.uwp.edu note: this assumes student2 is the person's login name A prompt will appear asking for Student2's password. Student2 should type this in, then press Enter. The terminal window doesn't look quite the same as a normal terminal window, but Student2 can still use Linux commands such as cd, ls, etc. to go to the location where she wants the copied file to be placed. Student2 then types put Lab01.zip The zipped file will then be placed in the proper location. Student2 is still logged in to her account at this time. Student2 should type exit to stop running sftp and return the machine to Student1's account. Student2 should log in as usual to her account, then: In a terminal window, cd to the directory where you saved the Lab01.zip file. Type the command unzip Lab01.zip to unzip the file. Beyond the Basics The goal of CSCI-241 is to teach you the fundamentals of object-oriented computer programming. These fundamentals apply regardless of the type of machine, operating system or object-oriented language you choose. To accomplish this we will use the Java programming language and an integrated development environment (IDE) named BlueJ. The remainder of this document introduces you to each of these. BlueJ BlueJ, like other IDEs, provides the user with many tools for developing Java programs including an editor, access to the compiler and a debugger. There are many other IDEs available for Java including Eclipse (originally created by IBM, but now a non-profit open source foundation), Forte, NetBeans (both by Sun), JBuilder (by Borland) and CodeWarrior (included with some textbooks). BlueJ was designed particularly for students just beginning to learn object-oriented programming using Java. You'll use BlueJ in the very first lab. Starting BlueJ To start BlueJ, enter the command (after the $ prompt) bluej& The ampersand (&) allows you to toggle back-and-forth between BlueJ and the terminal window. You can also reach BlueJ through the Applications->Programming menu. A few moments after entering this command, the main BlueJ window will open. Exiting BlueJ To exit BlueJ select Project -> Quit from BlueJ's menu. BlueJ Projects BlueJ, like most IDEs, collects Java files together into projects. A project is a directory that contains one or more Java programs and other related files. For example, when you copy files for use in a lab exercise, you typically copy one or more BlueJ projects. Creating and Opening Projects When you start working you will either want to create a new BlueJ project or open a pre-existing project. Both options appear in BlueJ's Project menu. When you select either option the system gives you a list of what is available in your current subdirectory. Each icon on the 'Look In:' line represents a way to either move to a different directory level, or change the way the directory listings are displayed in this window. Move your mouse pointer onto each icon, one at a time, to see (after a brief delay) a short description of the action that icon performs. Instead of using the mouse, you can also type the file name you want in the area labeled 'File Name:' located below the directory listing. To create a new project select Project -> New Project and enter the name of the project in the 'File Name:' area. To open an existing project select Project -> Open Project. In the Open Project window, choose the folder with the project name, then click Open. Your BlueJ window now displays a paper icon and a class icon for each class in the project. If you opened a new project, there are no classes currently displayed. Adding Classes to Projects To add a class to a project, click on the New Class button. A dialog box appears asking for a class name. Enter the name of your choice. Editing Java Files BlueJ uses a text editor named moe to edit Java source code. To open the editor, use the right mouse button, click on the class icon for LabOne and select \"Open Editor\" from the menu displayed. (Alternatively, you can double-click the class icon to edit the implementation.) The Java code for this class is now displayed. The editor is fairly intuitive. You can move around the file using the arrow keys. Text is inserted when you type. The editor also uses syntax highlighting. Right now we don't know much Java, but as the semester proceeds, you will see that different language structures appear in different colors in the editor. To close the editor, first choose Class -> Save, then choose Class -> Close. Compiling Java Files Java source code needs to be translated into byte code before it can be run. The Java files that we edit are called source code. Source code is easy for humans to read and interpret. Byte code, a.k.a. machine language, is binary. It is very difficult for humans to read but easy for the computer to interpret. In Java, source code files always have a .java suffix. Byte code files always have a .class suffix. Warning! Never print a byte code (or any other binary) file. To successfully compile, a Java file must be syntactically correct. This means that it must contain only legal Java statements. If there are syntactic errors the compiler cannot generate byte code, but can generate error messages. One nice feature of BlueJ's IDE is that when the compiler finds an error, it highlights the line where the error was detected and displays an error message, hopefully making the error easier to correct. The error may occur on the highlighted line or on one earlier in the program. Warning! Logical errors are mistakes in the program's logic, not its syntax. The Java compiler has no way of detecting these. To compile a class while you are editing it, click the Compile button that appears at the upper left of the window. If the compile is successful, you will receive a message saying, \"Class compiled - no syntax errors.\" To compile a class when not editing, right click the class icon and choose compile. If the compile is successful, you will see a message saying, \"Compiling ... Done\". Running Java Code from Within BlueJ Java is an object-oriented language. The basic idea behind object-oriented programming is to define classes and then make instances of those classes named objects. BlueJ gives us three ways to create and use objects. The BlueJ Object Bench It is possible in BlueJ to create (instantiate) an object and manipulate it directly. Right click on the class you wish to instantiate and choose new classname. A window appears with a name for the object. You may simply click okay, or rename the object as you wish. A red object icon appears in the object bench at the bottom of the BlueJ window. An object contains methods that may be invoked to make the object do things. Right click on the object icon and choose the method. If the method requires arguments, i.e., data, another window will appear asking you to enter it. Java Programs Most Java programs are made up of many objects working together to accomplish some task. Java programs are invoked (start running) from the class icon, not object icon. Right click on the class icon and choose Run Main Method. The program begins running. Note: Alternatively, you can run the main method by choosing void main(String []). You will then see a second window with { } symbols in the textbox. Simply choose OK to run the program. Java Applets There is a third way to manipulate objects in BlueJ. Applets are Java programs that are meant to run in a web browser. Applets require both extensive knowledge of Java and some knowledge of html. While we may explore applets at some point during the semester, they are not covered further here."
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_BooleanIfElseSwitch_index.html?C=S;O=D.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/BooleanIfElseSwitch Index of /Classes/Cs241/Examples/BooleanIfElseSwitch NameLast modifiedSizeDescription Parent Directory - PrintBoolean.java 2015-09-01 13:58 2.2K NestedIfs.java 2015-09-01 13:58 1.1K DemoSwitch.java 2015-09-01 13:58 1.1K BooleanTests.java 2015-09-01 13:58 1.0K DanglingElse.java 2015-09-01 13:58 690 CompareDoubleValue.java2015-09-01 13:58 649 DemoPrintf.java 2015-09-01 13:58 436"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_LiangLabs_Lab11_prelab11.html.json",
    "body_content": "CSCI 241 Labs: PreLab 11 CSCI 241 Labs: PreLab 11 Concepts in Object-Oriented Design Introduction Chapter 9 of our text introduces you to making your own classes and objects in Java. These include: static methods and data overloading constructors and methods passing objects to methods returning objects from methods The syntax behind these features is the easy part. Learning how and when to use them is more difficult, and to a certain extent, will only come with much practice. This prelab will walk you through the design of a Thermometer class that uses many of these features. Temperature There are multiple different temperature scales used for different purposes. Most of us in the United States are still more comfortable using the Fahrenheit scale than any other. In Fahrenheit water freezes at 32 degrees and boils at 212 degrees. Most of the rest of the world uses the Celsius scale. In Celsius water freezes at 0 degrees and boils at 100 degrees. There is also the strange concept of absolute zero. Absolute zero is the coldest possible temperature in the entire universe. It is -273.15 degrees Celsius and -459.67 degree Fahrenheit. Remember that the next time the temperature outside reaches 30 below! Some baseline temperatures in the two scales: temperature degrees Celsiusdegrees Fahrenheit symbol \u00b0C\u00b0F boiling point of water100.0212.0 freezing / melting point of water / ice0.032.0 absolute zero-273.15-459.67 Temperature conversions There are simple mathematical formulas we can use to convert a temperature in one scale to the other: \u00b0F = \u00b0C x 1.8 + 32.0 \u00b0C = (\u00b0F - 32.0) / 1.8 Designing a Thermometer Class When we design an instantiable class, the two basic questions we ask should be: What kind of data do we want in our objects? and Which methods do we want in our objects? We also need to determine if we wish to include static data and methods in our classes. Let's consider designing a Thermometer class. Class Constants The table above gives absolute zero and the freezing and boiling points of water using the different scales. These data are useful constants to let users look up at any time. Our thermometer class should declare them to be public class constants. Next we note that the conversion equations given above use some constants (32, 1.8 and 273.15) multiple times. This is a sure sign that they are useful constants. Two of them were already discussed above. The 1.8 is the ratio between the size of Fahrenheit and Celsius degrees. It takes 1.8 Fahrenheit degrees to make 1 Celsius degree. It is a useful for our conversions, but is not of general interest to the public. It should be declared as a private class constant. Converting Between Temperature Scales Look at the thermometer in the image below. It really serves two purposes: It tells us what the current temperature is in either Fahrenheit or Celsius. (It is about 63.5 \u00b0F = 17.5 \u00b0C) It can also be used to convert between Fahrenheit and Celsius and back. We simply read across from one scale to the other. For example: 40 \u00b0C = 104 \u00b0F. We want to design a Thermometer class that can also serve both functions. The thermometer in the image can only convert between Celsius and Fahrenheit. First, we note that the conversions are the same regardless of the current temperature. This is a sure sign that our conversion methods can be class methods. When we define the methods we will use the static modifier. To do the conversions, our Thermometer class should have 2 class methods. The method prototypes are: public static double celsiusToFahrenheit(double celsius) public static double fahrenheitToCelsius(double fahrenheit) Instance Variables and Methods We also want to instantiate Thermometer objects that will keep track of the current temperature. Thermometers are pretty simple objects. They keep track of the current temperature. That is about it. Our Thermometer class will have only one data member, currentTemperature, which we will store as the current Celsius temperature. It will have a number of different methods. These methods are all instance methods since they refer to the currentTemperature instance variable. It will have two constructors: a default constructor that sets the currentTemperature to 0.0 and an alternate constructor that takes the initial Celsius temperature as a parameter. (Note that it is not possible in Java to have an additional constructor that takes a Fahrenheit temperature as the initial value. Why?) It will have two \"setter\" methods: void setTemperatureUsingCelsius (double degreesC) which simply sets the current temperature. void setTemperatureUsingFahrenheit (double degreesF) which converts degreesF to Celsius and sets the current temperature. It will have two \"getter\" methods: double getCelsius () which simply returns the current temperature. double getFahrenheit () which converts the current temperature to Fahrenheit and returns it. Something to Think About Many modern thermometers also keep track of maximum and minimum temperatures. We already have all the coding skills we need to make our thermometers do this. What additional data members and methods would you add to the class so that thermometer objects will know their max and min temperatures?"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_InstantiableClasses_index.html?C=M;O=A.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/InstantiableClasses Index of /Classes/Cs241/Examples/InstantiableClasses NameLast modifiedSizeDescription Parent Directory - Circle.java 2015-09-01 13:57 1.6K Fraction.java 2015-09-01 13:57 3.1K FractionArrayTest.java 2015-09-01 13:57 1.6K TestCircle.java 2015-09-01 13:57 494 TestFraction.java 2015-09-01 13:57 936"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_index.html.json",
    "body_content": "UW-Parkside CSCI 241 Sample Code CSCI 241: Computer Science I - Y. Daniel Liang, 12th Edition This page contains sample programs both from the textbook and those written by your instructors. From the textbook's 12th edition: Introduction to Java Programming and Data Structures, 12th Edition, Examples by Chapters Instructor's Sample Programs: Examples will be added throughout the semester Basic Numeric Data Types, Operators and Characters Boolean Data Type, If-Else, Switch Loops Methods Basic Arrays (one-dimension) 2-Dimensional Arrays Instantiable Classes Strings and StringBuilders"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_Loops_index.html?C=D;O=D.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/Loops Index of /Classes/Cs241/Examples/Loops NameLast modifiedSizeDescription Parent Directory - WhileFor.java 2015-09-01 13:57 1.2K WhileDoWhile.java 2015-09-01 13:57 2.2K Triangles.java 2015-09-01 13:57 696 Tables.java 2015-09-01 13:57 1.6K Stats.java 2015-09-01 13:57 1.6K RectangleOfStars.java 2015-09-01 13:57 928 NestedFor.java 2015-09-01 13:57 2.1K MultTable.java 2015-09-01 13:57 1.3K ForLoopMystery.java 2015-09-01 13:57 464 BasicWhile.java 2015-09-01 13:57 1.1K"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_NumbersOperatorsCharacters.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/NumbersOperatorsCharacters Index of /Classes/Cs241/Examples/NumbersOperatorsCharacters NameLast modifiedSizeDescription Parent Directory - CharASCII.java 2015-09-01 13:57 949 Numerics.java 2015-09-01 13:57 686 PrePostIncr.java 2015-09-01 13:57 1.2K Primitives.java 2015-09-01 13:57 1.2K TestEscape.java 2015-09-01 13:57 862 TestInputDialog.java 2015-09-01 13:57 688 TryUnicode.java 2015-09-01 13:57 422 Typecasting.java 2015-09-01 13:57 603"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_BooleanIfElseSwitch.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/BooleanIfElseSwitch Index of /Classes/Cs241/Examples/BooleanIfElseSwitch NameLast modifiedSizeDescription Parent Directory - BooleanTests.java 2015-09-01 13:58 1.0K CompareDoubleValue.java2015-09-01 13:58 649 DanglingElse.java 2015-09-01 13:58 690 DemoPrintf.java 2015-09-01 13:58 436 DemoSwitch.java 2015-09-01 13:58 1.1K NestedIfs.java 2015-09-01 13:58 1.1K PrintBoolean.java 2015-09-01 13:58 2.2K"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_BasicArrays_index.html?C=D;O=D.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/BasicArrays Index of /Classes/Cs241/Examples/BasicArrays NameLast modifiedSizeDescription Parent Directory - TryArrayParam.java 2015-09-01 13:57 2.9K Stats.java 2015-09-01 13:57 1.8K ParameterPrint.java 2015-09-01 13:57 963 InstantiateFillPrint..>2015-09-01 13:57 869 CopyArrayExample.java 2015-09-01 13:57 942"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_2DArrays_index.html?C=N;O=A.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/2DArrays Index of /Classes/Cs241/Examples/2DArrays NameLast modifiedSizeDescription Parent Directory - MultiplicationTable...>2015-09-01 13:57 1.6K"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_Methods_index.html?C=D;O=A.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/Methods Index of /Classes/Cs241/Examples/Methods NameLast modifiedSizeDescription Parent Directory - MultiplicationTable...>2015-09-01 13:57 1.8K Temperature.java 2015-09-01 13:57 790 TestMax.java 2015-09-01 13:57 561"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_Examples_NumbersOperatorsCharacters_index.html?C=S;O=A.html.json",
    "body_content": "Index of /Classes/Cs241/Examples/NumbersOperatorsCharacters Index of /Classes/Cs241/Examples/NumbersOperatorsCharacters NameLast modifiedSizeDescription Parent Directory - TryUnicode.java 2015-09-01 13:57 422 Typecasting.java 2015-09-01 13:57 603 Numerics.java 2015-09-01 13:57 686 TestInputDialog.java 2015-09-01 13:57 688 TestEscape.java 2015-09-01 13:57 862 CharASCII.java 2015-09-01 13:57 949 PrePostIncr.java 2015-09-01 13:57 1.2K Primitives.java 2015-09-01 13:57 1.2K"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_LiangLabs_Lab09_lab9.html.json",
    "body_content": "CSCI 241 Labs: Lab 9 CSCI 241 Labs: Lab 9 The Game of Life There are 6 checkpoints , including the clean-up checkpoint, in this lab. You and your partner should work together using just one of your accounts. CHANGE WHO IS CONTROLLING THE COMPUTER AFTER EACH CHECKPOINT! If you need help with any exercise, raise your hand. Copy the lab materials to your account from /home/student/Classes/Cs241/Labs/Lab09 In this lab you will complete an implementation of the Game of Life. To keep the game manageable, we will use 40 rows and 60 columns on the board. Reading the Initial Board State We will read an initial cell pattern from a data file. Let's start by looking at one possible input file. We included several input data files inside the directory you copied for this lab exercise. Go to a terminal window and type cd to go into the Lab09 directory. Once there, type the command: more life1.dat This command lists the contents of the life1.dat data file to the screen. The format of this data file lists just the row and column values of the live cells. Each line contains an (row, column) ordered pair. What makes this game interesting is that different input files will exhibit very different behavior. That behavior depends on the file's initial pattern of live cells: life1.dat and life4.dat will change and then stabilize by repeating themselves. life2.dat will quickly evolve into extinction. life3.dat will continue to exist but also move across the grid. life5.dat will combine several of these behaviors in one diagram. Start running BlueJ and open the Lab09 project. There are two classes listed, GameOfLife and GraphicBoard. Most of your work will be done inside GameofLife. GraphicBoard will help us get a more visual display of the data when we reach the last part of the lab exercise. Edit the GameOfLife class. Look over the code. What kind of actions does it perform? What kind of variables are declared inside main()? Which other methods are included? In Chapter 8 we learn about class variables and constants. The two integer and two character constants at the beginning of the class are declared at the \"class level\". This means they are available to all methods in the class without passing their values through parameters. Just after these declarations you'll see a partially-completed method named makeBoard(). The job of makeBoard() is to create an empty board of characters and return it. The method already contains code that declares and instantiates a 2-dimensional board of characters of the appropriate size. Add these parts to the method to complete it: Replace the void return type in the method prototype so that it will be a 2-dimensional array of characters. Write a nested for loop to initialize each position in this array to hold the EMPTY character constant. Add a return statement to return the newBoard. Find the readBoardFromFile() method. It is also stubbed in (partially written). Make these changes so it will work with the data files: Change the prefix variable to make it point to your Lab09 directory. Add a while loop to the method to read from the file until the end of the file is reached. Hint: Review the \"Going Around in Circles\" lab to see how to use the hasNext() method in the Scanner class when reading files. Inside the while loop, read first a row then a column value. Note that integer variables with these names have been already declared inside this method to hold the values. Set newBoard[row][column] = ALIVE; To test this code: Compile the class. Note: Because your main() needs to get a file name as input, you cannot use Run Main Method within BlueJ to run it. Choose void main(String[]), and then type any of the life_.dat file names, in double-quotes, inside the braces, when the Method Call window appears. (For example, you might type: {\"life3.dat\"}). The displayASCIIBoard() method will display the initial board. Note: You may want to expand BlueJ's output window slightly to make the board show up better. Use the mouse to grab a lower corner of the window and drag it down. 1 Show us your code. Be ready to answer the following questions: When calling the main() method, what do the { and } symbols hold? What characters are used for ALIVE and EMPTY? Why do you think we chose those characters? How big is life1.dat (in bytes)? Hint: in a terminal window, cd to the Lab09 directory and type ls -l to see the contents of this directory. How big would the data file be if we chose to use a format where each cell was in the file as an individual character, '+' or ' '? Counting the Neighbors The trickiest part of this program is accurately counting the number of neighbors that are alive. Return to the editor and find the countNeighbors() method. The method is partially written; checking only the three neighboring cells above the current cell. Complete the part of the method that checks the two neighbors on each side of the current cell and the three neighbors below the current cell. Be certain to check for wrapping in both the vertical and horizontal directions. To test this method, Go to the main() method and uncomment the lines designated for checkpoint #2. Run main() with \"life5.dat\" as its input file. countNeighbors() is tested 5 times. This is the output you should see to know if your code is correct: 10,16 neighbors: 20,0 neighbors: 039,59 neighbors: 010,17 neighbors: 3 8,17 neighbors: 1 Try other row and column values of your own choosing. Look at what displayASCIIBoard() gives you to identify locations of other interesting cells to test. 2 Show us your completed code. Be ready to answer the following questions: Why do we use the oldBoard when counting the neighbors? Could the % operator be used instead of the range checks on r and c? Why or why not? Evolving Before you continue, COMMENT OUT the main() method lines you needed only for checkpoint #2 (copyBoard() and countNeighbors() calls). Find the evolveToNext() method. This method is also stubbed in for you. The prelab describes four different rules for when a cell is ALIVE or EMPTY. Our approach simplifies the code a bit. We first set the entire board to EMPTY, and then set appropriate cells to ALIVE, when needed. Since only the first two rules set a cell to be ALIVE, only the first two rules need to be implemented. The first rule is implemented in the stubbed method. Add another if to the method to implement the second rule. Here is how to run the main() method: Make the loop run 50 times. Uncomment the line inside the loop that runs the evolveToNext() method. Enter the filename \"life3.dat\" when the Method Call window appears. The ASCII board should be displayed and then redisplayed, 50 times. Within the grid, you will see an \"arrowhead\"-shaped object move down and to the left across your screen. 3 Show us your corrected code. Be ready to answer the following questions: What would be the result if we did implement the last two rules? evolveToNext() contains two if statements, used to follow the rules for the next generation. Would an else if work for the second one? Why or why not? Displaying the Board Graphically Let's move from an ASCII display of the board to a graphical display. The other class in our project, GraphicBoard, extends the ACM Graphics Library GraphicsProgram, so it has these capabilities. Back in GameOfLife, uncomment the lines in main() that are designated for checkpoint #4. Run the main() method and you will see that the graphics window appears with a box drawn in it. Open the editor window for GraphicBoard. Find the method named drawBoundingBox(). You will see that the method adds 4 GLines to the window. A GLine is simply a line that extends from (x,y) point to another. This is the code which ran and drew the 4 lines in the window. The displayBoard() method draws circles using GOvals. A GOval is an oval, with location, height and width. An oval with equal height and width is a circle. As seen in other labs, we had to translate our program's coordinates to pixels. To review: Pixels work in an (X, Y) coordinate system. Our program works with [row][column]. Note, however, that X is equivalent to column and Y is equivalent to row. Therefore, when we supply pixel coordinates, we write [columnPixel][rowPixel]! Your instructors placed the origin (0,0) at pixel (50, 50), so we had to add 50 to each value before drawing. Similarly, we assumed each cell is 10 pixels by 10 pixels. Therefore we will multiply by 10 before adding the 50. The equations used to translate are: x = 50 + 10 * coly = 50 + 10 * row Look for those lines inside of the already-written code. The two 5's in the same line make the circle have both height and width of 5 pixels. You and your partner should now complete the displayBoard() method. Your job is to enclose the lines which draw the circles inside a nested-for loop. Here is your algorithm: For each row and column, if the board at that position is ALIVE, draw a circle there. Otherwise, do nothing. Now go back to the GameOfLife class and revise the main() method one more time. Look for the notes to replace the call to displayASCIIBoard() with a call to displayBoard(). Test displayBoard() by running the main() method. Once it is working, modify the loop in the main() method so that displays 500 generations of the board. Run it on different life__.dat input files and see how they look! 4 Show us your running code. Be prepared to answer the following question: Translating from program coordinates to pixel coordinates is a real pain. How could you revise your program to make this easier? Designing Your Own Data Set Run the main method with life5.dat. This is a combination of life1.dat and life3.dat. The arrow gizmo from life3.dat runs into the pinwheel from life1.dat. For this checkpoint you will develop your own data files. Go to a terminal window and cd to the Lab09 directory. Enter the command: cp life5.dat mylife.dat This copies life5.dat to a new file named mylife.dat. BlueJ does not allow you to edit non-Java files, so we will have to use a different editor. You can reach a simple text editor named gedit from your main Gnome Applications menu. From the upper left corner of your monitor screen, choose Applications-Accessories-Text Editor to begin running gedit. Navigate to your Lab09 directory and open the mylife.dat file. The editing commands work very similarly to those of the BlueJ editor, so take a moment to try some simple edits. You can move around the file using either the arrow keys or the mouse. You save the file by choosing File-Save (or Ctrl-S). Edit mylife.dat to add some extra filled positions. Try to draw a particular shape, such as a pinwheel or arrow, somewhere else within the grid. Test your changes by running the main() method. Now try these other files and be ready to describe how their appearances change as the simulation runs: barber.dat cheshire.dat gosper.dat 5 Show us your modified datafile and describe the running animations. After the Lab Don't forget to exit Firefox before you log out. 6 Show us that you have logged out, cleaned up, turned off your monitor and pushed in your chairs for this last checkpoint."
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_LiangLabs_Lab03_lab3.html.json",
    "body_content": "CSCI 241 Labs: Lab 3 CSCI 241 Labs: Lab 3 Write, Test, Write Some More ... There are 6 checkpoints () in this lab, including the cleanup checkpoint. You and your partner should work together using just one of your accounts. So that one partner doesn't dominate the computer, CHANGE WHO IS IN CHARGE OF TYPING AT THE COMPUTER AFTER EACH CHECKPOINT! If you need help with any exercise, raise your hand. Getting Started Copy the directory Lab03 from /home/student/Classes/Cs241/Labs to your account. If you have forgotten how to do this, refer to the steps in Lab01. Change directories into Lab03 and start BlueJ by entering bluej&. Translating Mathematical Formulas When you studied geometry you learned how to calculate the area of different geometric shapes. Your instructor found several at this website: Area formulas (found at: www.math.com/tables/geometry/areas.htm) These are not written in Java (yet). It takes a little thought to \"translate\" them, since you can't just copy them directly. One can think of a mathematical formula as a simple algorithm. It contains all the information you need to write a program to calculate it. Open the project called Calculations and open the editor for the AreaFormulas class. This program looks similar to one of the early versions of the ComputeArea class shown in your textbook. In the comments, it describes what kind of steps need to be coded. By the time you are finished, it should ask for the necessary input values, do the proper calculations for each type of geometric figure's area, and display the results. Remember, if you need to take the square root of a number, such as 18.2, you have to write double answer = Math.sqrt(18.2); Once written, you will also need to test your program. Work with your partner to think of some sample values to try. If you wish to try them in a calculator, you can reach one from the left side of the upper panel on your lab account desktop. Choose Applications-Accessories-Calculator to use it. Use the comments you see to guide you while you write the code. Write the related code directly below the comment that describes it. 1 Demonstrate your AreaFormulas program with your test data. Be prepared to answer the following questions: What kind of errors occurred as you were working? What did you do to fix them? Are there values that will not work in this program? How many variables did you need? Could this program have been written with a different number? Close the AreaFormulas class. Increment(++) and Decrement(--) Operators A couple of operators you will probably use quite frequently (once we learn about loops) are the ++ (sometimes called \"auto-increment\") and -- (sometimes called \"auto-decrement\") operators. They can be quite tricky! The key to using them is to isolate the operator in a single statement. However, it is also important to realize what can happen when they are NOT used in isolation. Still within the Calculations project, open the IncrDecr class in the editor. This class has some simple and some sample trick statements using ++ and --. Compile and run the program as it looks now. What do you see printed? Is the effect of the pre- and post- versions the same or different? For this class, we are looking for side effects. Remember, a side effect occurs when more than one variable changes its value in a single assignment statement. You must have noticed that the trick statements are only in comment form. To see what happens when they run, work with your partner to do the following: Declare and initialize all the necessary variables, as indicated in the comments. For each of the trick statements, add System.out.println() statements before and after the statement that print the values of ALL variables affected by the trick statement. For example: where you see the line int e = ++a; you should uncomment it, and print the value of a before and after the line, and print the value of e after the line, too. See if you can figure out why you got the answers that you did! 2 Demonstrate your IncrDecr program. Be prepared to answer the following questions: How did the variable e get its value? What were the side effects? How did the variable f get its value? What were the side effects? (Trickiest!!!) How did the variable g get its value? Describe the side effects. Close the IncrDecr class, and the Calculations project. Time Conversions Remember to switch which partner is at the keyboard. Open the project called ConvertFromSeconds. This project contains a class named SecondsConvert which is supposed to take a total number of seconds and break it into minutes and seconds. But - a lot of the code is missing! Review the comments to see how the steps are organized. Work with your partner to fill in the missing code. Use Divide (/) and Modulus (%) appropriately as you separate the minutes and seconds. Think about 3 test cases you can try to check your work. 3 Show us that the SecondsConvert program works. Be prepared to answer the following questions: Why does it make sense to use modulus (%) to find the seconds? Why don't we get fractions of minutes when we do the minutes calculation? minutes, seconds and totalSeconds are all declared to be int. Why? Would the program give correct results if they were declared to be double? Demonstrate your 3 test cases and describe how you know the results are correct. Converting to Total Seconds Switch which partner is working at the keyboard before you continue. Create a new class named CountSeconds. In this class, write a main method to work backwards from the previous program. In other words, you'll combine days, hours, minutes and seconds and sum up total seconds. Note: The conversion is going in the opposite direction of the previous program. You will need to ask the user for four different input numbers: days, hours, minutes and seconds. To make the task a bit more interesting, allow the user to enter seconds with a decimal point and display an answer that contains total seconds (including a decimal point). 4 Show us that your program runs. Be prepared to answer the following questions: Does your program care if minutes are larger than 60? If hours are larger than 24? How many digits maximum does your output display? Program From Scratch As usual, time to switch keyboard control with your partner for this exercise. Create a new class named DivideMod which will do the following: Use standard input to ask the user for two integers: a number and a divisor. Calculate the integer result of the number divided by divisor. Calculate the integer result of the remainder when you divide the number by the divisor. Print both the original numbers and the 2 results to the console in this format using 2 lines with the given text (sample data shown below - try other numbers to see those results as well): Original number: 27 Divisor: 12 number / divisor: 2 number mod divisor: 3 5 Show us that your program runs correctly, displaying the test values above plus 2 other tests. Be prepared to answer the following questions: Is modulus more useful for ints or doubles? What happens to the spacing when you use larger numbers? Why? Close project ConvertFromSeconds. After the Lab Return to Firefox, log onto Canvas and get your next programming assignment, #3. Don't forget to log out of Canvas and close Firefox before you log out. 6 Show us that you have logged out, cleaned up, pushed in your chairs and turned off your monitor for this last checkpoint. End of Lab"
  },
  {
    "file": "/Users/aaronantreassian/UWP_Web_Clones/uwp_cs/JSON_Files/Classes_Cs241_LiangLabs_Lab05_lab5.html.json",
    "body_content": "CSCI 241 Labs: Lab 5 CSCI 241 Labs: Lab 5 Going Around in Circles There are 5 checkpoints , including the clean-up checkpoint, in this lab. Work together with your partner using just one of your accounts. CHANGE WHO IS CONTROLLING THE COMPUTER AFTER EACH CHECKPOINT! If you need help with any exercise, raise your hand. Copy the directory /home/student/Classes/Cs241/Labs/Lab05 to your account. Change directories into Lab05 and start BlueJ by entering bluej&. Using the Debugger Open the project Debugger and edit the VeryLongLoop class. Look at the for loop. It is not an infinite loop, just a loop that will run for a very long time. Look for the for loop line. Left-click on the left side of that line (if you have line numbers displayed, click on the line number). This will set a breakpoint where the program will stop running, and let you single-step through the code. Close the editor, compile the class, and run its main() method. When BlueJ reaches the breakpoint you set, stop and examine the values of ALL variables in the program (i, j and AVOGADROS) by reviewing the variables in the lower-right panel of the Debugger window. Click the Continue button to run all lines within the loop and then see how the variable values change. Once you see the patterns of how each variable changes (or does not change), you can close the debugger window by clicking the Terminate button. Close the VeryLongLoop class editor window. ---------------------------------------------------------------------- There are two other classes in the Debugger project, TabulateFractions and TabulateFractionsAgain. Both of these (at least sometimes) contain infinite loops. Your job is to use the debugger to find and remove the problems with the loops. Open the TabulateFractions class in the BlueJ editor. The main() method is supposed to print a table of the fractions with a given denominator up to and including 1.0. For example, if the input is: 4, the output from the program is Fraction Decimal 1/4 0.25000000 2/4 0.50000000 3/4 0.75000000 4/4 1.00000000 Follow through the code and make certain both you and your partner understand what each line is doing. Compile the class and run its main() method with an input of 4. The table should appear exactly as above. Now we will set a breakpoint in the program and walk through the code line by line. CAUTION: BlueJ's debugger can be very tempermental, and it is important to use it in just the right way. Follow these directions carefully. If BlueJ hangs or won't let you terminate a program, it may be necessary to kill off BlueJ and restart it. See the bottom of the last page of this lab for complete directions on how to stop a runaway program in BlueJ. Open the editor window. Use the mouse to set a breakpoint on line number 36, the first line of code after the if() statement. Do this by left-clicking on the line number in the vertical bar on the left side of the window directly to the left of the double decimal = 0.0; statement. (Note: you don't need to have line numbers displayed in order to set breakpoints.) A stop sign will appear. Run the main() method. Enter an input of 4, again. The program will stop with the double decimal = 0.0; statement highlighted. We know it has not yet run because the variable named decimal doesn't appear in the lower-right debugger window. Click the Step button in the debugger window to execute the highlighted line. After it runs, the decimal variable appears in the window. Press the Step button again and again watch the program execute the loop. Between clicking the Step button, you may examine the current state of all the variables in the program. Pay particular attention to the values the decimal variable holds. You will know the main()method has finished running when all the buttons in the debugger turn grey, as does BlueJ's barberpole. You will still need to close BlueJ's terminal window and the debugger window, by clicking on the X in the upper left corner of each. Now we will re-run the program, but entering an input value that doesn't work (i.e., causes an infinite loop). Run the main() method and use an input value of 6. Leave the breakpoint set, and use Step so we can look at the results after each line runs. (Note: The Step Into is used when we have more methods than main() to jump into. We'll start seeing them in chapter 6.) After the fifth time through the loop, the program should print out 5/6 0.83333333 Now watch the value of decimal very carefully. After the sixth time through the loop, the program should print out 6/6 1.0000000 and terminate. What happened instead? Terminate the run of the program by clicking the Terminate button. (If BlueJ does not want to stop the program, you may have to terminate and restart BlueJ. There are notes at the end of this lab on how to do this.) As you learned in class (we hope :), it is very dangerous to use = = and != with doubles. Change the while loop condition so that the loop continues until decimal is within 0.0001 of the value 1.0. Compile your class, and re-run the main() method with an input of 6. Try another test case by running the main() method with an input of 7. Have you fixed the bug? Once you are convinced that the bug is gone, remove the breakpoint by clicking on the stop sign. ---------------------------------------------------------------------- The final class in the Debugger project TabulateFractionsAgain is supposed to print the same table as the previous project. Unfortunately, this one, too contains a bug that causes an infinite loop. Use the debugger to find and remove the bug. 1 Be prepared to answer the following questions: In the VeryLongLoop program, could i's value have been printed after the loop had finished? Explain how each of the values were changing (or not). Explain what the bug was in TabulateFractions and how you used the debugger to remove it. Explain what the bug was in TabulateFractionsAgain and how you used the debugger to remove it. Show us your corrected programs, and explain the problem with each. Close project Debugger. Loops in Graphics Open project Dazzle. Compile the CoolCircles class and run its main() method. The program creates a series of concentric circles on a window. While it looks kind of cool, all the colors are currently some shade of gray. Open CoolCircles in the BlueJ editor and locate the for loop beginning in line 32. The loop is already working as written, and your job is to change the lines within the loop body to give the circles color. To construct a Color, you must give three integer values red, green, and blue, which stand for the amounts of red, green, and blue, respectively, to mix and create the color. In the current program, the amounts of red, green, and blue used for each color are always the same. This creates the shades of gray. Modify the values assigned to red, green, and blue so that the circle you draw will have color. We want you to use certain constraints while assigning the values. On each iteration of the loop: red, green, and blue must have different values red, green, and blue must have their values assigned in terms of the loop variable radius red, green, and blue must always have a value between 0 and 255 inclusive for every iteration of the loop Use your imagination. There are plenty of different formulas that meet these constraints. Here are some examples to give you ideas: int red = 255 - radius; int red = (radius*radius)%256; int red = (int)(radius/5.8)*5; 2 Show us your revised code, and how it runs. Make sure you have used something different than the examples above in at least 2 of the color settings. Close project Dazzle. Input Validation Both decision statements and loops are used when validating input. Input validation is the very important process of making sure the input the user supplies makes sense in the context of the program. For example, if working on a cash register program, it would not make sense to purchase -3 items. If a student enters a phone number (including area code) it should consist of 10 digits. In this day and age, checking input is critical, since one of the primary ways hackers break into systems is by supplying invalid input values. Open project AnswerMe. It contains a single class, OneToTen. Open it in the editor. This program is supposed to keep asking the user for a number between 1 and 10 (inclusive) and to stop asking when it received valid input. However, when you run it, it takes any integer you decide to enter. Modify the program in these ways: You are required to use a do..while loop to accomplish these tasks. Once the user provides valid input, print the value they entered and the number of tries it took them. e.g., if they enter 7 on the first try, the program should print 7 and 1. Give the user up to three (3) chances to enter a number between 1 and 10. If, after three tries, the user still hasn't entered a valid number, print an error message politely telling them that they are \"Not Reading Directions!\" and terminate. In addition, you may also use an if inside (and/or outside) the do...while if you think it will help. 3 Show us this program when you are ready. Close project AnswerMe. Files are ForeverUsing Java to read from and write to files is covered in detail in Chapter 12 of the text. Now that we have Scanners and loops available, however, we can do some simple file processing. The Scanner class that we use to read from the keyboard may also be used to read from files. When we make a Scanner to read from a file, we provide it the name of a File object, instead of System.in. Open the project StudentFile. Compile and run the main() method of the Student class. It should compile and run without problems. It reads the data for single student from a data file and prints the student's name and two exam scores to the output window. Open the Student class in the editor. First, look at the filename. The File class constructor requires that we specify the entire (absolute) filename path in order for the system to be able to find the file. As you can see, the current code specifies where the original Lab05 files exist. There is also a copy of the file in your Lab05 directory. Modify the filename to point to your copy. Hint: Type pwd (the present-working-directory command) in a terminal window to find the name of the directory in which you are currently working. To view the actual file we are reading from, go to terminal window, cd to the Lab05 directory, and type the command more students.dat. The contents of the file should appear on the screen. Note that there is more than one student in the file, but the program currently reads only the first one. Your job is to modify the program so that it processes the entire file. Return to the Student class in the BlueJ editor window. Add a while loop below the Scanner declaration so that all data in the file will be read. The while loop should look like: while (fileIn.hasNext()) { . . . } In clearer English, the while says to read until we reach the end of the file. Recompile and run the program. Now your program should print data for all the students in the file. 4 Show us your completed program. Close project StudentFile. Extras for Experts No extra credit for this, just the fun of trying it. Modify your Student class so rather than printing the entire file, it performs a search for a particular student and prints their name and grades. To do this: Above the loop have the user enter the name of the student being sought. Within the loop place an if statement that checks to see if the two names are equal. We cannot compare names using ==, instead we need to use the String class' equals method. E.g. s1.equals(s2) checks to see if String s1 is equal to String s2. Only print the name and scores when the student is found. If the student is not found in the file, print an error message when the end of file is reached. After the Lab Return to Firefox, log on to Canvas and print the next programming assignment, #5, if you haven't already. Be sure to exit Firefox before you log out and leave the lab. 5 Show us that you have logged out, turned off your monitor, cleaned up, and pushed in your chairs for this last checkpoint. Stopping a Runaway Program in BlueJ The BlueJ Debugger can be tempermental. If you hang BlueJ or get BlueJ into a state where it is running an infinite loop that you can't terminate, each of the following may help. You can stop a runaway program in BlueJ by right-clicking the moving arrow in the lower right area of the main BlueJ window. The only choice is \"Reset Machine\" - choose it and it will stop moving, indicating that the program has stopped. Another easy way to kill BlueJ is to go to its main window and click the X in the upper right corner. This should kill BlueJ including all its windows. 98.375% of the time this works. The next easiest way to kill BlueJ is to right click on the BlueJ item on the task bar at the bottom of your screen. A popup menu appears that includes an option that says kill App. Choose this option. If none of these work, call over your instructor or lab assistant."
  }
]